{"version":3,"sources":["services/appReducer.ts","utils/constants.ts","AppContext.tsx","hooks/createContext.tsx","Elements/Button.tsx","Elements/MediaScroller.tsx","Elements/StyledElements.tsx","hooks/useAsync.ts","utils/environment.ts","utils/utils.ts","types/common.ts","services/api.ts","Components/ContentByGenres.tsx","Components/DiscoverMovies.tsx","Components/Trending.tsx","hooks/useDarkMode.tsx","styles/theme.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["appReducer","state","action","type","movies","trending","payload","tv","popular","upcoming","updatedGenres","genres","map","genre","id","genreId","data","tvGenres","movieGenres","initialState","ctx","React","undefined","c","Error","Provider","createContext","appContext","AppProvider","AppContextProvider","children","useReducer","dispatch","value","StyledButton","styled","button","theme","primary","colors","surface1","text1","props","size","xs","xxs","xl","Button","onClick","disabled","rest","Div","div","Arrow","span","bsize","MediaScrollerUL","ul","lg","MediaItem","li","inlineSize","Figure","figure","Image","img","blockSize","aspectRatio","Figcaption","figcaption","md","sm","text2","MediaScroller","list","ratio","loading","split","i","widthRatio","heightRatio","height","width","Array","fill","mediaList","useRef","document","createElement","scrollPerClick","current","querySelector","clientWidth","scrollTo","top","left","scrollLeft","behavior","console","log","offsetWidth","scrollWidth","ref","item","index","image","alt","title","src","caption","Header","header","ButtonContainer","useAsync","fn","useState","setState","callback","useCallback","a","error","environment","apiKey","process","baseURL","imageBaseURL","getUrl","path","queryString","getImageURL","MediaType","getMoviesFromApiResult","results","backdrop_path","poster_path","vote_average","release_date","getTVsFromApiResult","name","first_air_date","fetchTrendingTV","fetch","response","json","fetchTrendingMovies","fetchPopularMovies","fetchUpcomingMovies","fetchGenres","tvUrl","movieUrl","Promise","all","url","fetchMoviesByGenre","fetchTvByGenre","MovieType","Section","section","isBackdrop","surface2","surface3","GenreSection","Movie","selectedMedia","setSelectedMedia","genreContent","loadGenreContent","useEffect","currentGenre","find","mediaScrollerList","Date","toLocaleDateString","year","month","day","Tv","ContentByGenres","status","loadGenre","tvGenresId","commonGenres","filter","includes","DiscoverMovies","Popular","movieType","setMovieType","loadMovies","Upcoming","Trending","trendingStatus","loadTrending","useDarkMode","darkModeQuery","window","matchMedia","matches","isDarkMode","setIsDarkMode","darkModeHandler","addListener","removeEventListener","getTheme","hue","saturation","lightness","light","brand","surface4","surfaceShadow","shadowStrength","dark","sizeStepUp","n","up","result","typeScale","xxxs","xxl","xxxl","mediaQueries","below1400","below768","below375","GlobalStyles","createGlobalStyle","App","color","highlightColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a4f19e9d.chunk.js","sourcesContent":["import { ActionObjects, State } from '../types/common';\r\n\r\nexport default function appReducer(state: State, action: ActionObjects): State {\r\n  switch (action.type) {\r\n    case 'UPDATE_TRENDING_MOVIES_BY_DAY':\r\n      return {\r\n        ...state,\r\n        movies: {\r\n          ...state.movies,\r\n          trending: action.payload,\r\n        },\r\n      };\r\n    case 'UPDATE_TRENDING_TV_BY_DAY':\r\n      return {\r\n        ...state,\r\n        tv: {\r\n          ...state.movies,\r\n          trending: action.payload,\r\n        },\r\n      };\r\n    case 'UPDATE_POPULAR_MOVIES':\r\n      return {\r\n        ...state,\r\n        movies: {\r\n          ...state.movies,\r\n          popular: action.payload,\r\n        },\r\n      };\r\n    case 'UPDATE_UPCOMING_MOVIES':\r\n      return {\r\n        ...state,\r\n        movies: {\r\n          ...state.movies,\r\n          upcoming: action.payload,\r\n        },\r\n      };\r\n\r\n    case 'UPDATE_MOVIES_BY_GENRE': {\r\n      const { genres } = state.movies;\r\n      const updatedGenres = genres.map((genre) => {\r\n        if (genre.id === action.payload.genreId) {\r\n          genre.data = action.payload.data;\r\n        }\r\n        return genre;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        movies: {\r\n          ...state.movies,\r\n          genres: updatedGenres,\r\n        },\r\n      };\r\n    }\r\n\r\n    case 'UPDATE_TV_BY_GENRE': {\r\n      const { genres } = state.tv;\r\n      const updatedGenres = genres.map((genre) => {\r\n        if (genre.id === action.payload.genreId) {\r\n          genre.data = action.payload.data;\r\n        }\r\n        return genre;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        tv: {\r\n          ...state.tv,\r\n          genres: updatedGenres,\r\n        },\r\n      };\r\n    }\r\n\r\n    case 'UPDATE_GENRES': {\r\n      return {\r\n        ...state,\r\n        tv: {\r\n          ...state.tv,\r\n          genres: action.payload.tvGenres,\r\n        },\r\n        movies: {\r\n          ...state.movies,\r\n          genres: action.payload.movieGenres,\r\n        },\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { State } from '../types/common';\r\n\r\nexport const initialState: State = {\r\n  movies: {\r\n    upcoming: [],\r\n    popular: [],\r\n    trending: [],\r\n    genres: [],\r\n  },\r\n  tv: {\r\n    trending: [],\r\n    genres: [],\r\n  },\r\n};\r\n","import { useReducer } from 'react';\r\nimport createContext from './hooks/createContext';\r\nimport appReducer from './services/appReducer';\r\nimport { AppContext } from './types/common';\r\nimport { initialState } from './utils/constants';\r\n\r\nconst [appContext, AppProvider] = createContext<AppContext>();\r\n\r\nexport const AppContextProvider = ({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) => {\r\n  const [state, dispatch] = useReducer(appReducer, initialState);\r\n  return <AppProvider value={{ ...state, dispatch }}>{children}</AppProvider>;\r\n};\r\n\r\nexport { appContext };\r\n","import * as React from 'react';\r\n\r\nexport default function createContext<A extends {} | null>() {\r\n  const ctx = React.createContext<A | undefined>(undefined);\r\n\r\n  const useContext = () => {\r\n    const c = React.useContext(ctx);\r\n    if (c === undefined)\r\n      throw new Error('useContext must be inside a Provider with a value');\r\n    return c;\r\n  };\r\n  return [useContext, ctx.Provider] as const;\r\n}\r\n","import styled from 'styled-components';\r\n\r\ntype StyledButtonProps = { primary: boolean };\r\nconst StyledButton = styled.button<StyledButtonProps>`\r\n  width: min-content;\r\n  height: min-content;\r\n  color: ${({ theme, primary }) => {\r\n    if (primary) {\r\n      return theme.colors.surface1;\r\n    }\r\n    return theme.colors.text1;\r\n  }};\r\n\r\n  border-radius: ${(props) => props.theme.size.xs};\r\n  border: 1px solid ${({ theme }) => theme.colors.text1};\r\n  font-weight: 600;\r\n\r\n  background-color: ${({ theme, primary }) => {\r\n    if (primary) {\r\n      return theme.colors.text1;\r\n    }\r\n    return 'inherit';\r\n  }};\r\n\r\n  text-transform: capitalize;\r\n  cursor: pointer;\r\n\r\n  padding-block: ${(props) => props.theme.size.xxs};\r\n  padding-inline: ${(props) => props.theme.size.xl};\r\n`;\r\n\r\ntype ButtonOwnProps = {\r\n  onClick: React.MouseEventHandler<HTMLButtonElement>;\r\n  children: React.ReactNode;\r\n  primary?: boolean;\r\n};\r\n\r\ntype ButtonProps = ButtonOwnProps &\r\n  React.ButtonHTMLAttributes<HTMLButtonElement>;\r\n\r\nconst Button = ({\r\n  primary = true,\r\n  onClick,\r\n  children,\r\n  disabled = false,\r\n  ...rest\r\n}: ButtonProps) => {\r\n  return (\r\n    <StyledButton\r\n      primary={primary}\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import { useRef } from 'react';\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport styled from 'styled-components';\r\n\r\nconst Div = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nconst Arrow = styled.span<{ bsize: string }>`\r\n  color: rgb(255, 255, 255);\r\n  background: rgba(20, 20, 20, 0.5);\r\n\r\n  display: none;\r\n  cursor: pointer;\r\n  font-size: 6em;\r\n\r\n  position: absolute;\r\n  top: ${(props) => props.theme.size.xs};\r\n  height: ${(props) => props.bsize};\r\n  width: 4%;\r\n\r\n  text-align: center;\r\n  display: none;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  &:nth-of-type(1) {\r\n    left: 0;\r\n  }\r\n\r\n  &:nth-of-type(2) {\r\n    right: 0;\r\n  }\r\n  ${Div}:hover & {\r\n    display: inline-flex;\r\n  }\r\n`;\r\n\r\nconst MediaScrollerUL = styled.ul`\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  gap: ${(props) => props.theme.size.xl};\r\n\r\n  padding-inline: ${(props) => props.theme.size.lg};\r\n  padding-block: ${(props) => props.theme.size.xs};\r\n\r\n  overflow-x: auto;\r\n  overscroll-behavior-inline: contain;\r\n  scroll-snap-type: inline mandatory;\r\n  scroll-padding-left: ${(props) => props.theme.size.xl};\r\n  scroll-padding-right: ${(props) => props.theme.size.xl};\r\n  scroll-padding-inline: ${(props) => props.theme.size.xl};\r\n\r\n  scrollbar-width: none;\r\n\r\n  &::-webkit-scrollbar {\r\n    width: 0;\r\n    height: 0;\r\n  }\r\n\r\n  @media (prefers-reduced-motion: no-preference) {\r\n    & {\r\n      scroll-behavior: smooth;\r\n    }\r\n  }\r\n`;\r\n\r\ntype MediaItemProps = {\r\n  inlineSize: string;\r\n};\r\n\r\nconst MediaItem = styled.li<MediaItemProps>`\r\n  display: inline-block;\r\n  inline-size: ${(props) => props.inlineSize};\r\n  block-size: min-content;\r\n  /* \r\n  &:last-of-type figure {\r\n    position: relative;\r\n\r\n    &::after {\r\n      content: '';\r\n      position: absolute;\r\n\r\n      inline-size: ${(props) => props.theme.size.lg};\r\n      block-size: 100%;\r\n\r\n      inset-block-start: 0;\r\n      inset-inline-end: calc(${(props) => props.theme.size.lg} * -1);\r\n    }\r\n  } */\r\n`;\r\n\r\nconst Figure = styled.figure`\r\n  scroll-snap-align: start;\r\n\r\n  display: grid;\r\n  gap: calc(${(props) => props.theme.size.lg} / 2);\r\n  margin: 0;\r\n\r\n  cursor: pointer;\r\n  user-select: none;\r\n\r\n  outline-offset: 12px;\r\n\r\n  &:focus {\r\n    outline-offset: 7px;\r\n  }\r\n`;\r\n\r\ntype ImageProps = {\r\n  aspectRatio: Exclude<MediaScrollerProps['ratio'], typeof undefined>;\r\n  inlineSize: string;\r\n  blockSize: string;\r\n};\r\nconst Image = styled.img<ImageProps>`\r\n  inline-size: ${(props) => props.inlineSize};\r\n  block-size: ${(props) => props.blockSize};\r\n\r\n  aspect-ratio: ${(props) => props.aspectRatio};\r\n\r\n  object-fit: cover;\r\n\r\n  border-radius: 1ex;\r\n  border: none;\r\n  overflow: hidden;\r\n\r\n  background-image: linear-gradient(to bottom, hsl(0 0% 40%), hsl(0 0% 20%));\r\n`;\r\n\r\nconst Figcaption = styled.figcaption`\r\n  line-height: ${(props) => props.theme.size.md};\r\n  font-weight: 600;\r\n  font-size: ${(props) => props.theme.size.md};\r\n\r\n  & > p {\r\n    font-size: ${(props) => props.theme.size.sm};\r\n    font-weight: 400;\r\n    color: ${(props) => props.theme.colors.text2};\r\n    padding-block: ${(props) => props.theme.size.sm};\r\n  }\r\n`;\r\n\r\ntype MediaScrollerProps = {\r\n  list: {\r\n    id: number;\r\n    image: string;\r\n    title: string;\r\n    caption?: string;\r\n  }[];\r\n  ratio?: '2/3' | '1/1' | '16/9';\r\n  loading?: boolean;\r\n};\r\n\r\nconst MediaScroller = ({\r\n  list,\r\n  ratio = '1/1',\r\n  loading = false,\r\n}: MediaScrollerProps) => {\r\n  const [widthRatio, heightRatio] = ratio.split('/').map((i) => +i);\r\n  const size = '10rem';\r\n  const height =\r\n    widthRatio > heightRatio ? size : `${(10 * heightRatio) / widthRatio}rem`;\r\n\r\n  const width =\r\n    widthRatio > heightRatio ? `${(10 * widthRatio) / heightRatio}rem` : size;\r\n\r\n  const data = loading ? Array(10).fill({}) : list;\r\n  const mediaList = useRef<HTMLUListElement>(document.createElement('ul'));\r\n  const scrollPerClick =\r\n    mediaList.current?.querySelector('li')?.clientWidth || 0;\r\n\r\n  const scrollRight = () => {\r\n    console.log(\r\n      mediaList.current?.offsetWidth,\r\n      mediaList.current?.scrollLeft,\r\n      mediaList.current?.scrollWidth\r\n    );\r\n    if (\r\n      (mediaList.current?.offsetWidth || 0) +\r\n        scrollPerClick +\r\n        (mediaList.current?.scrollLeft || 0) >=\r\n      (mediaList.current?.scrollWidth || 0)\r\n    ) {\r\n      console.log('scrolled to bottom');\r\n    }\r\n    mediaList.current?.scrollTo({\r\n      top: 0,\r\n      left: mediaList.current?.scrollLeft + scrollPerClick,\r\n      behavior: 'smooth',\r\n    });\r\n  };\r\n\r\n  const scrollLeft = () => {\r\n    mediaList.current?.scrollTo({\r\n      top: 0,\r\n      left: mediaList.current?.scrollLeft - scrollPerClick,\r\n      behavior: 'smooth',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Div>\r\n      <Arrow bsize={height} onClick={scrollLeft}>\r\n        ‹\r\n      </Arrow>\r\n      <Arrow bsize={height} onClick={scrollRight}>\r\n        ›\r\n      </Arrow>\r\n      <MediaScrollerUL ref={mediaList}>\r\n        {data.map((item, index) => (\r\n          <MediaItem key={item.id || index} inlineSize={width}>\r\n            <Figure>\r\n              <picture>\r\n                {item.image ? (\r\n                  <Image\r\n                    aspectRatio={ratio}\r\n                    inlineSize={width}\r\n                    blockSize={height}\r\n                    alt={item.title}\r\n                    loading=\"lazy\"\r\n                    src={item.image}\r\n                  />\r\n                ) : (\r\n                  <Skeleton width={width} height={height} />\r\n                )}\r\n              </picture>\r\n              <Figcaption>\r\n                {item.title || (\r\n                  <>\r\n                    <Skeleton />\r\n                    <Skeleton width=\"65%\" />\r\n                  </>\r\n                )}\r\n                {item.caption && <p>{item.caption}</p>}\r\n              </Figcaption>\r\n            </Figure>\r\n          </MediaItem>\r\n        ))}\r\n      </MediaScrollerUL>\r\n    </Div>\r\n  );\r\n};\r\n\r\nexport default MediaScroller;\r\n","import styled from 'styled-components';\r\n\r\nexport const Header = styled.header`\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  align-items: center;\r\n  justify-content: start;\r\n  padding-inline: ${(props) => props.theme.size.lg};\r\n  padding-block: ${(props) => props.theme.size.xs};\r\n  grid-gap: ${(props) => props.theme.size.xs};\r\n\r\n  & h1 {\r\n    font-size: ${(props) => props.theme.size.xl};\r\n  }\r\n`;\r\n\r\nexport const ButtonContainer = styled.div`\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  width: min-content;\r\n  border-radius: ${(props) => props.theme.size.md};\r\n  border: 1px solid ${({ theme }) => theme.colors.text1};\r\n\r\n  & > button {\r\n    border: none;\r\n    border-radius: inherit;\r\n  }\r\n`;\r\n","import { useCallback, useState } from 'react';\r\nimport { appContext } from '../AppContext';\r\nimport { ActionTypes } from './../types/common';\r\n\r\ntype AsyncState<R> =\r\n  | { state: 'LOADING' }\r\n  | { state: 'SUCCESS'; data: R }\r\n  | { state: 'ERROR'; error: string };\r\n\r\ntype Unwrap<T> = T extends Promise<infer U> ? U : T;\r\n\r\nexport default function useAsync<T extends (...args: any[]) => Promise<any>>(\r\n  fn: T,\r\n  type?: ActionTypes\r\n): [AsyncState<Unwrap<ReturnType<T>>>, (...args: Parameters<T>) => void] {\r\n  const [state, setState] = useState<AsyncState<Unwrap<ReturnType<T>>>>({\r\n    state: 'LOADING',\r\n  });\r\n  const { dispatch } = appContext();\r\n\r\n  const callback = useCallback(\r\n    async (...args: Parameters<T>) => {\r\n      try {\r\n        setState({ state: 'LOADING' });\r\n        const data = await fn(...args);\r\n        setState({ state: 'SUCCESS', data });\r\n        if (type) {\r\n          dispatch({ type, payload: data });\r\n        }\r\n      } catch (e) {\r\n        console.error(e);\r\n        setState({ state: 'ERROR', error: 'Network Error' });\r\n      }\r\n    },\r\n    [dispatch, fn, type]\r\n  );\r\n\r\n  return [state, callback];\r\n}\r\n","const environment = {\r\n  apiKey: process.env.REACT_APP_MOVIEDB_KEY,\r\n  baseURL: process.env.REACT_APP_BASEURL,\r\n  imageBaseURL: process.env.REACT_APP_IMG_BASEURL,\r\n};\r\nexport default environment;\r\n","import { ImageType, Media, Size } from '../types/common';\r\nimport { MovieResult } from '../types/Movies';\r\nimport { TVResult } from '../types/Tv';\r\nimport environment from './environment';\r\n\r\nconst { apiKey, baseURL, imageBaseURL } = environment;\r\n\r\nexport const getUrl = (path: string, queryString = ''): string =>\r\n  `${baseURL}${path}?api_key=${apiKey}${queryString}`;\r\n\r\nexport function getImageURL<T extends ImageType>(\r\n  path: string,\r\n  type: T,\r\n  size: Size<T>\r\n) {\r\n  return path ? `${imageBaseURL}${size}${path}` : '';\r\n}\r\n\r\nexport const getMoviesFromApiResult = (results: MovieResult[]): Media[] => {\r\n  const movies = results.map(\r\n    ({\r\n      title,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n      release_date,\r\n    }) => ({\r\n      title,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n      release_date,\r\n    })\r\n  );\r\n  return movies;\r\n};\r\n\r\nexport const getTVsFromApiResult = (results: TVResult[]): Media[] => {\r\n  const tvs = results.map(\r\n    ({\r\n      name,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n      first_air_date,\r\n    }) => ({\r\n      title: name,\r\n      release_date: first_air_date,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n    })\r\n  );\r\n  return tvs;\r\n};\r\n","export type ImageType = 'poster' | 'backdrop' | 'profile';\r\n\r\nexport type Size<T extends ImageType> = T extends 'poster'\r\n  ? 'w92' | 'w154' | 'w185' | 'w342' | 'w500' | 'w780' | 'original'\r\n  : T extends 'backdrop'\r\n  ? 'w300' | 'w780' | 'w1280' | 'original'\r\n  : T extends 'profile'\r\n  ? 'w45' | 'w185' | 'original'\r\n  : never;\r\n\r\nexport type Media = {\r\n  title: string;\r\n  id: number;\r\n  backdrop_path: string;\r\n  poster_path: string;\r\n  vote_average: number;\r\n  release_date: string;\r\n};\r\n\r\nexport enum MediaType {\r\n  Movie = 'movie',\r\n  Tv = 'tv',\r\n}\r\n\r\nexport type Genre = {\r\n  id: number;\r\n  name: string;\r\n  data: Media[];\r\n};\r\n\r\nexport type State = {\r\n  movies: {\r\n    upcoming: Media[];\r\n    popular: Media[];\r\n    trending: Media[];\r\n    genres: Genre[];\r\n  };\r\n  tv: {\r\n    trending: Media[];\r\n    genres: Genre[];\r\n  };\r\n};\r\n\r\nexport type ActionObjects =\r\n  | {\r\n      type:\r\n        | 'UPDATE_TRENDING_MOVIES_BY_DAY'\r\n        | 'UPDATE_TRENDING_TV_BY_DAY'\r\n        | 'UPDATE_UPCOMING_MOVIES'\r\n        | 'UPDATE_POPULAR_MOVIES';\r\n      payload: Media[];\r\n    }\r\n  | ContentByGenre\r\n  | UpdateGenres;\r\n\r\ntype ContentByGenre = {\r\n  type: 'UPDATE_MOVIES_BY_GENRE' | 'UPDATE_TV_BY_GENRE';\r\n  payload: {\r\n    data: Media[];\r\n    genreId: number;\r\n  };\r\n};\r\n\r\ntype UpdateGenres = {\r\n  type: 'UPDATE_GENRES';\r\n  payload: {\r\n    tvGenres: Genre[];\r\n    movieGenres: Genre[];\r\n  };\r\n};\r\n\r\nexport type ActionTypes = ActionObjects['type'];\r\n\r\nexport interface AppContext extends State {\r\n  dispatch: React.Dispatch<ActionObjects>;\r\n}\r\n","import { Genre, Media } from '../types/common';\r\nimport {\r\n  GenreMovies,\r\n  PopularMovies,\r\n  TrendingMovies,\r\n  UpcomingMovies,\r\n} from '../types/Movies';\r\nimport { GenreTv, TrendingTv } from '../types/Tv';\r\nimport {\r\n  getMoviesFromApiResult,\r\n  getTVsFromApiResult,\r\n  getUrl,\r\n} from '../utils/utils';\r\n\r\nexport const fetchTrendingTV = async (): Promise<Media[]> => {\r\n  const response = await fetch(getUrl('trending/tv/day'));\r\n  const data = await response.json();\r\n  const tv = getTVsFromApiResult((data as TrendingTv).results);\r\n  return tv;\r\n};\r\n\r\nexport const fetchTrendingMovies = async (): Promise<Media[]> => {\r\n  const response = await fetch(getUrl('trending/movie/day'));\r\n  const data = await response.json();\r\n  const movies = getMoviesFromApiResult((data as TrendingMovies).results);\r\n  return movies;\r\n};\r\n\r\nexport const fetchPopularMovies = async (): Promise<Media[]> => {\r\n  const response = await fetch(getUrl('movie/popular'));\r\n  const data = await response.json();\r\n  const movies = getMoviesFromApiResult((data as PopularMovies).results);\r\n  return movies;\r\n};\r\n\r\nexport const fetchUpcomingMovies = async (): Promise<Media[]> => {\r\n  const response = await fetch(getUrl('movie/upcoming'));\r\n  const data = await response.json();\r\n  const movies = getMoviesFromApiResult((data as UpcomingMovies).results);\r\n  return movies;\r\n};\r\n\r\nexport const fetchGenres = async (): Promise<{\r\n  tvGenres: Genre[];\r\n  movieGenres: Genre[];\r\n}> => {\r\n  const tvUrl = getUrl('genre/tv/list');\r\n  const movieUrl = getUrl('genre/movie/list');\r\n\r\n  const [tvGenres, movieGenres] = await Promise.all(\r\n    [tvUrl, movieUrl].map(async (url) => {\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      return data?.genres?.map((genre: Genre) => ({ ...genre, data: [] }));\r\n    })\r\n  );\r\n\r\n  return { tvGenres, movieGenres };\r\n};\r\n\r\nexport const fetchMoviesByGenre = async (\r\n  genreId: number\r\n): Promise<{ genreId: number; data: Media[] }> => {\r\n  const url = getUrl('discover/movie', `&with_genres=${genreId}`);\r\n  const response = await fetch(url);\r\n  const data = await response.json();\r\n  const movies = getMoviesFromApiResult((data as GenreMovies).results);\r\n  return { genreId, data: movies };\r\n};\r\n\r\nexport const fetchTvByGenre = async (\r\n  genreId: number\r\n): Promise<{ genreId: number; data: Media[] }> => {\r\n  const url = getUrl('discover/tv', `&with_genres=${genreId}`);\r\n  const response = await fetch(url);\r\n  const data = await response.json();\r\n  const tv = getTVsFromApiResult((data as GenreTv).results);\r\n  return { data: tv, genreId };\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { appContext } from '../AppContext';\r\nimport Button from '../Elements/Button';\r\nimport MediaScroller from '../Elements/MediaScroller';\r\nimport { ButtonContainer, Header } from '../Elements/StyledElements';\r\nimport useAsync from '../hooks/useAsync';\r\nimport {\r\n  fetchGenres,\r\n  fetchMoviesByGenre,\r\n  fetchTvByGenre,\r\n} from '../services/api';\r\nimport { Genre, MediaType } from '../types/common';\r\nimport { getImageURL } from '../utils/utils';\r\n\r\nconst ContentByGenres = () => {\r\n  const [status, loadGenre] = useAsync(fetchGenres, 'UPDATE_GENRES');\r\n  useEffect(() => {\r\n    loadGenre();\r\n  }, [loadGenre]);\r\n\r\n  const {\r\n    movies: { genres: movieGenres },\r\n    tv: { genres: tvGenres },\r\n  } = appContext();\r\n\r\n  const tvGenresId = tvGenres.map(({ id }) => id);\r\n  const commonGenres = movieGenres.filter(({ id }) => tvGenresId.includes(id));\r\n\r\n  return (\r\n    <>\r\n      {status.state === 'LOADING' ? (\r\n        <MediaScroller list={[]} loading />\r\n      ) : (\r\n        commonGenres.map((genre, index) => (\r\n          <GenreSection genre={genre} key={genre.id} index={index} />\r\n        ))\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst Section = styled.section<{ isBackdrop: boolean }>`\r\n  background-image: ${(props) =>\r\n    props.isBackdrop\r\n      ? `linear-gradient(\r\n      to bottom,\r\n      ${props.theme.colors.surface2},\r\n      ${props.theme.colors.surface3}\r\n    )`\r\n      : 'none'};\r\n`;\r\ntype GenreSectionProps = { genre: Genre; index: number };\r\nconst GenreSection = ({ genre, index }: GenreSectionProps) => {\r\n  const isBackdrop = index % 2 === 1;\r\n  const [selectedMedia, setSelectedMedia] = useState<MediaType>(\r\n    MediaType.Movie\r\n  );\r\n\r\n  const [genreContent, loadGenreContent] = useAsync(\r\n    selectedMedia === MediaType.Movie ? fetchMoviesByGenre : fetchTvByGenre,\r\n    selectedMedia === MediaType.Movie\r\n      ? 'UPDATE_MOVIES_BY_GENRE'\r\n      : 'UPDATE_TV_BY_GENRE'\r\n  );\r\n\r\n  useEffect(() => {\r\n    loadGenreContent(genre.id);\r\n  }, [genre.id, loadGenreContent]);\r\n\r\n  const { movies, tv } = appContext();\r\n\r\n  const genres = selectedMedia === MediaType.Movie ? movies.genres : tv.genres;\r\n  const currentGenre = genres.find(({ id }) => genre.id === id);\r\n\r\n  const mediaScrollerList =\r\n    currentGenre?.data.map(\r\n      ({ id, title, poster_path, backdrop_path, release_date }) => ({\r\n        id,\r\n        title,\r\n        image:\r\n          poster_path &&\r\n          getImageURL(\r\n            isBackdrop ? backdrop_path : poster_path,\r\n            isBackdrop ? 'backdrop' : 'poster',\r\n            'original'\r\n          ),\r\n        caption: new Date(release_date).toLocaleDateString('en-us', {\r\n          year: 'numeric',\r\n          month: 'short',\r\n          day: 'numeric',\r\n        }),\r\n      })\r\n    ) || [];\r\n\r\n  return (\r\n    <Section isBackdrop={isBackdrop}>\r\n      <Header>\r\n        <h1>{genre.name}</h1>\r\n        <ButtonContainer>\r\n          <Button\r\n            primary={selectedMedia === MediaType.Movie}\r\n            onClick={() => setSelectedMedia(MediaType.Movie)}\r\n          >\r\n            {MediaType.Movie}\r\n          </Button>\r\n          <Button\r\n            primary={selectedMedia === MediaType.Tv}\r\n            onClick={() => setSelectedMedia(MediaType.Tv)}\r\n          >\r\n            {MediaType.Tv}\r\n          </Button>\r\n        </ButtonContainer>\r\n      </Header>\r\n\r\n      <MediaScroller\r\n        list={mediaScrollerList}\r\n        ratio={isBackdrop ? '16/9' : '2/3'}\r\n        loading={genreContent.state === 'LOADING'}\r\n      />\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport default ContentByGenres;\r\n","import { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { appContext } from '../AppContext';\r\nimport Button from '../Elements/Button';\r\nimport MediaScroller from '../Elements/MediaScroller';\r\nimport { ButtonContainer, Header } from '../Elements/StyledElements';\r\nimport useAsync from '../hooks/useAsync';\r\nimport { fetchPopularMovies, fetchUpcomingMovies } from '../services/api';\r\nimport { getImageURL } from '../utils/utils';\r\n\r\nenum MovieType {\r\n  Popular = 'popular',\r\n  Upcoming = 'upcoming',\r\n}\r\n\r\nconst Section = styled.section`\r\n  background-image: linear-gradient(\r\n    to bottom,\r\n    ${(props) => props.theme.colors.surface2},\r\n    ${(props) => props.theme.colors.surface3}\r\n  );\r\n`;\r\n\r\nconst DiscoverMovies = () => {\r\n  const [movieType, setMovieType] = useState<MovieType>(MovieType.Popular);\r\n\r\n  const [movies, loadMovies] = useAsync(\r\n    movieType === MovieType.Popular ? fetchPopularMovies : fetchUpcomingMovies,\r\n    movieType === MovieType.Popular\r\n      ? 'UPDATE_POPULAR_MOVIES'\r\n      : 'UPDATE_UPCOMING_MOVIES'\r\n  );\r\n\r\n  useEffect(() => {\r\n    loadMovies();\r\n  }, [loadMovies]);\r\n\r\n  const {\r\n    movies: { popular, upcoming },\r\n  } = appContext();\r\n\r\n  const data = movieType === MovieType.Popular ? popular : upcoming;\r\n\r\n  const mediaScrollerList = data.map(\r\n    ({ id, title, backdrop_path, release_date }) => ({\r\n      id,\r\n      title,\r\n      image:\r\n        backdrop_path && getImageURL(backdrop_path, 'backdrop', 'original'),\r\n      caption: new Date(release_date).toLocaleDateString('en-us', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric',\r\n      }),\r\n    })\r\n  );\r\n\r\n  return (\r\n    <Section id=\"discover-movies\">\r\n      <Header>\r\n        <h1>Discover Movies</h1>\r\n        <ButtonContainer>\r\n          <Button\r\n            primary={movieType === MovieType.Popular}\r\n            onClick={() => setMovieType(MovieType.Popular)}\r\n          >\r\n            Popular\r\n          </Button>\r\n          <Button\r\n            primary={movieType === MovieType.Upcoming}\r\n            onClick={() => setMovieType(MovieType.Upcoming)}\r\n          >\r\n            Upcoming\r\n          </Button>\r\n        </ButtonContainer>\r\n      </Header>\r\n\r\n      <MediaScroller\r\n        list={mediaScrollerList}\r\n        loading={movies.state === 'LOADING'}\r\n        ratio=\"16/9\"\r\n      />\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport default DiscoverMovies;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { appContext } from '../AppContext';\r\nimport Button from '../Elements/Button';\r\nimport MediaScroller from '../Elements/MediaScroller';\r\nimport { ButtonContainer, Header } from '../Elements/StyledElements';\r\nimport useAsync from '../hooks/useAsync';\r\nimport { fetchTrendingMovies, fetchTrendingTV } from '../services/api';\r\nimport { MediaType } from '../types/common';\r\nimport { getImageURL } from '../utils/utils';\r\n\r\nconst Trending = () => {\r\n  const [selectedMedia, setSelectedMedia] = useState<MediaType>(\r\n    MediaType.Movie\r\n  );\r\n\r\n  const [trendingStatus, loadTrending] = useAsync(\r\n    selectedMedia === MediaType.Movie ? fetchTrendingMovies : fetchTrendingTV,\r\n    selectedMedia === MediaType.Movie\r\n      ? 'UPDATE_TRENDING_MOVIES_BY_DAY'\r\n      : 'UPDATE_TRENDING_TV_BY_DAY'\r\n  );\r\n\r\n  const { movies, tv } = appContext();\r\n\r\n  useEffect(() => {\r\n    loadTrending();\r\n  }, [loadTrending]);\r\n\r\n  const data =\r\n    selectedMedia === MediaType.Movie ? movies.trending : tv.trending;\r\n\r\n  const mediaScrollerList = data.map(\r\n    ({ id, title, poster_path, release_date }) => ({\r\n      id,\r\n      title,\r\n      image: poster_path && getImageURL(poster_path, 'poster', 'original'),\r\n      caption: new Date(release_date).toLocaleDateString('en-us', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric',\r\n      }),\r\n    })\r\n  );\r\n\r\n  return (\r\n    <section id=\"trending\">\r\n      <Header>\r\n        <h1>Trending</h1>\r\n        <ButtonContainer>\r\n          <Button\r\n            primary={selectedMedia === MediaType.Movie}\r\n            onClick={() => setSelectedMedia(MediaType.Movie)}\r\n          >\r\n            {MediaType.Movie}\r\n          </Button>\r\n          <Button\r\n            primary={selectedMedia === MediaType.Tv}\r\n            onClick={() => setSelectedMedia(MediaType.Tv)}\r\n          >\r\n            {MediaType.Tv}\r\n          </Button>\r\n        </ButtonContainer>\r\n      </Header>\r\n\r\n      <MediaScroller\r\n        list={mediaScrollerList}\r\n        ratio=\"2/3\"\r\n        loading={trendingStatus.state === 'LOADING'}\r\n      />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Trending;\r\n","import { useEffect, useState } from 'react';\r\n\r\nconst useDarkMode = () => {\r\n  const darkModeQuery = window?.matchMedia('(prefers-color-scheme: dark)');\r\n  const [isDarkMode, setIsDarkMode] = useState(darkModeQuery?.matches);\r\n  useEffect(() => {\r\n    const darkModeHandler = ({ matches }: MediaQueryListEvent): void =>\r\n      setIsDarkMode(matches);\r\n    darkModeQuery?.addListener(darkModeHandler);\r\n    return () => darkModeQuery.removeEventListener('change', darkModeHandler);\r\n  }, [darkModeQuery]);\r\n\r\n  return isDarkMode;\r\n};\r\n\r\nexport default useDarkMode;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const getTheme = (isDarkMode = false) => {\r\n  /* brand foundation */\r\n  const hue = '200';\r\n  const saturation = '100%';\r\n  const lightness = '50%';\r\n\r\n  /* light */\r\n  const light = {\r\n    brand: `hsl(${hue} ${saturation} ${lightness}`,\r\n    text1: `hsl(${hue} ${saturation} 10%)`,\r\n    text2: `hsl(${hue} 30% 30%)`,\r\n    surface1: `hsl(${hue} 25% 90%)`,\r\n    surface2: `hsl(${hue} 20% 99%)`,\r\n    surface3: `hsl(${hue} 20% 92%)`,\r\n    surface4: `hsl(${hue} 20% 85%)`,\r\n    surfaceShadow: `hsl(${hue} 10% 20%)`,\r\n    shadowStrength: '0.02',\r\n  };\r\n\r\n  const dark = {\r\n    brand: `hsl(${hue} calc(${saturation} / 2) calc(${lightness} / 1.5))`,\r\n    text1: `hsl(${hue} 15% 85%)`,\r\n    text2: `hsl(${hue} 5% 65%)`,\r\n    surface1: `hsl(${hue} 10% 10%)`,\r\n    surface2: `hsl(${hue} 10% 15%)`,\r\n    surface3: `hsl(${hue} 5% 20%)`,\r\n    surface4: `hsl(${hue} 5% 25%)`,\r\n    surfaceShadow: `hsl(${hue} 50% 3%)`,\r\n    shadowStrength: '0.8',\r\n  };\r\n\r\n  function sizeStepUp(n: number, up = true): string {\r\n    let result = 1;\r\n    const typeScale = 1.25;\r\n    while (n > 1) {\r\n      result = up ? result * typeScale : result / typeScale;\r\n      n--;\r\n    }\r\n    return `calc(1rem * ${result})`;\r\n  }\r\n\r\n  return {\r\n    colors: isDarkMode ? dark : light,\r\n    size: {\r\n      xxxs: sizeStepUp(5, false),\r\n      xxs: sizeStepUp(4, false),\r\n      xs: sizeStepUp(3, false),\r\n      sm: sizeStepUp(2, false),\r\n      md: sizeStepUp(1),\r\n      lg: sizeStepUp(2),\r\n      xl: sizeStepUp(3),\r\n      xxl: sizeStepUp(4),\r\n      xxxl: sizeStepUp(5),\r\n    },\r\n    mediaQueries: {\r\n      below1400: 'only screen and (max-width: 1400px)',\r\n      below768: 'only screen and (max-width: 768px)',\r\n      below375: 'only screen and (max-width: 375px)',\r\n    },\r\n  };\r\n};\r\n\r\nconst theme = getTheme();\r\ntype ThemeType = typeof theme;\r\ndeclare module 'styled-components' {\r\n  export interface DefaultTheme extends ThemeType {}\r\n}\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  html {\r\n    /* grow as per screen width */\r\n    font-size: calc(1px + 1vw);\r\n    line-height: calc(1.1rem + 0.5vw);\r\n    block-size: 100%;\r\n    background-color: ${({ theme }) => theme.colors.surface1};\r\n    color: ${({ theme }) => theme.colors.text1};\r\n    font-family: 'Roboto Mono', monospace, system-ui, sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n\r\n    @media ${({ theme }) => theme.mediaQueries.below768} {\r\n      font-size: 16px;\r\n    }\r\n\r\n    @media ${({ theme }) => theme.mediaQueries.below768} {\r\n      font-size: 14px;\r\n    }\r\n\r\n    @media ${({ theme }) => theme.mediaQueries.below375} {\r\n      font-size: 12px;\r\n    }\r\n  }\r\n\r\n  body {\r\n    background-color: ${({ theme }) => theme.colors.surface1};\r\n  }\r\n\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n","import React from 'react';\nimport { SkeletonTheme } from 'react-loading-skeleton';\nimport { ThemeProvider } from 'styled-components';\nimport { AppContextProvider } from './AppContext';\nimport ContentByGenres from './Components/ContentByGenres';\nimport DiscoverMovies from './Components/DiscoverMovies';\nimport Trending from './Components/Trending';\nimport useDarkMode from './hooks/useDarkMode';\nimport { getTheme, GlobalStyles } from './styles/theme';\n\nfunction App() {\n  const isDarkMode = useDarkMode();\n  const theme = getTheme(isDarkMode);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyles />\n      <AppContextProvider>\n        <SkeletonTheme\n          color={theme.colors.surface2}\n          highlightColor={theme.colors.surface1}\n        >\n          <Trending />\n          <DiscoverMovies />\n          <ContentByGenres />\n        </SkeletonTheme>\n      </AppContextProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}