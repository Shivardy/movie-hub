{"version":3,"sources":["services/appReducer.ts","utils/constants.ts","AppContext.tsx","hooks/createContext.tsx","Elements/Button.tsx","utils/environment.ts","utils/utils.ts","types/common.ts","Elements/MediaScroller.tsx","Elements/StyledElements.tsx","services/api.ts","hooks/data/useContentByGenre.tsx","hooks/data/useGenres.tsx","hooks/useInView.tsx","Components/ContentByGenres.tsx","hooks/data/useDiscoverMovies.tsx","Components/DiscoverMovies.tsx","hooks/data/useTrending.tsx","Components/Trending.tsx","hooks/useDarkMode.tsx","styles/theme.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["appReducer","state","action","initialState","movies","upcoming","popular","trending","genres","tv","ImageSize","poster","backdrop","profile","ctx","React","undefined","c","Error","Provider","createContext","AppProvider","AppContextProvider","children","useReducer","dispatch","value","StyledButton","styled","button","theme","primary","colors","surface1","text1","props","size","xs","xxxs","md","Button","onClick","disabled","rest","environment","apiKey","process","baseURL","imageBaseURL","getUrl","path","queryString","getImageSrc","type","img","src","srcset","paths","filter","map","substring","join","getMoviesFromApiResult","results","title","id","backdrop_path","poster_path","vote_average","release_date","getTVsFromApiResult","name","first_air_date","debounce","fn","timeout","time","args","clearTimeout","setTimeout","MediaType","MovieType","Div","div","Arrow","span","bsize","isHidden","MediaScrollerUL","ul","xl","lg","MediaItem","li","inlineSize","Figure","figure","Image","blockSize","aspectRatio","surface2","Figcaption","figcaption","sm","text2","MediaScroller","list","ratio","loading","split","i","widthRatio","heightRatio","height","width","getHeightAndWidth","mediaList","useRef","document","createElement","useState","isHiddenLeftArrow","setIsHiddenLeftArrow","isHiddenRightArrow","setIsHiddenRightArrow","data","Array","fill","image","window","current","offsetWidth","scrollLeft","scrollTo","top","left","behavior","ref","onScroll","scrollWidth","item","index","ListItem","alt","srcSet","caption","Header","header","ButtonContainer","fetcher","url","a","fetch","response","json","useContentByGenre","genreId","useQuery","select","Movie","useGenres","urls","Promise","all","multiFetcher","movie","tvGenres","movieGenres","useInView","triggerOnce","threshold","root","rootMargin","inView","setInView","useEffect","node","IntersectionObserver","observer","entries","forEach","entry","isIntersecting","disconnect","observe","Section","section","isBackdrop","surface3","GenreSectionWrapper","genre","selectedMedia","setSelectedMedia","Tv","GenreSection","isLoading","mediaScrollerList","Date","toLocaleDateString","year","month","day","ContentByGenres","tvGenresId","commonGenres","includes","useDiscoverMovies","Upcoming","DiscoverMovies","Popular","movieType","setMovieType","handleButton","useTrending","Trending","useDarkMode","darkModeQuery","matchMedia","matches","isDarkMode","setIsDarkMode","darkModeHandler","addListener","removeEventListener","getTheme","hue","saturation","lightness","light","brand","surface4","surfaceShadow","shadowStrength","dark","sizeStepUp","n","up","result","typeScale","xxs","xxl","xxxl","mediaQueries","below1400","below768","below375","GlobalStyles","createGlobalStyle","App","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","staleTime","Infinity","color","highlightColor","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8e72b0ab.chunk.js","sourcesContent":["import { State } from '../types/common';\r\n\r\nexport default function appReducer(state: State, action: any): State {\r\n  return state;\r\n}\r\n","import { State } from '../types/common';\r\n\r\nexport const initialState: State = {\r\n  movies: {\r\n    upcoming: [],\r\n    popular: [],\r\n    trending: [],\r\n    genres: [],\r\n  },\r\n  tv: {\r\n    trending: [],\r\n    genres: [],\r\n  },\r\n};\r\n\r\nexport const ImageSize = {\r\n  poster: ['w92', 'w154', 'w185', 'w342', 'w500', 'w780', 'original'],\r\n  backdrop: ['w300', 'w780', 'w1280', 'original'],\r\n  profile: ['w45', 'w185', 'original'],\r\n};\r\n","import { useReducer } from 'react';\r\nimport createContext from './hooks/createContext';\r\nimport appReducer from './services/appReducer';\r\nimport { AppContext } from './types/common';\r\nimport { initialState } from './utils/constants';\r\n\r\nconst [appContext, AppProvider] = createContext<AppContext>();\r\n\r\nexport const AppContextProvider = ({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) => {\r\n  const [state, dispatch] = useReducer(appReducer, initialState);\r\n  return <AppProvider value={{ ...state, dispatch }}>{children}</AppProvider>;\r\n};\r\n\r\nexport { appContext };\r\n","import * as React from 'react';\r\n\r\nexport default function createContext<A extends {} | null>() {\r\n  const ctx = React.createContext<A | undefined>(undefined);\r\n\r\n  const useContext = () => {\r\n    const c = React.useContext(ctx);\r\n    if (c === undefined)\r\n      throw new Error('useContext must be inside a Provider with a value');\r\n    return c;\r\n  };\r\n  return [useContext, ctx.Provider] as const;\r\n}\r\n","import styled from 'styled-components';\r\n\r\ntype StyledButtonProps = { primary: boolean };\r\nconst StyledButton = styled.button<StyledButtonProps>`\r\n  width: min-content;\r\n  height: min-content;\r\n  color: ${({ theme, primary }) => {\r\n    if (primary) {\r\n      return theme.colors.surface1;\r\n    }\r\n    return theme.colors.text1;\r\n  }};\r\n\r\n  border-radius: ${(props) => props.theme.size.xs};\r\n  border: 1px solid ${({ theme }) => theme.colors.text1};\r\n  font-weight: 600;\r\n\r\n  background-color: ${({ theme, primary }) => {\r\n    if (primary) {\r\n      return theme.colors.text1;\r\n    }\r\n    return 'inherit';\r\n  }};\r\n\r\n  text-transform: capitalize;\r\n  cursor: pointer;\r\n\r\n  padding-block: ${(props) => props.theme.size.xxxs};\r\n  padding-inline: ${(props) => props.theme.size.md};\r\n`;\r\n\r\ntype ButtonOwnProps = {\r\n  onClick: React.MouseEventHandler<HTMLButtonElement>;\r\n  children: React.ReactNode;\r\n  primary?: boolean;\r\n};\r\n\r\ntype ButtonProps = ButtonOwnProps &\r\n  React.ButtonHTMLAttributes<HTMLButtonElement>;\r\n\r\nconst Button = ({\r\n  primary = true,\r\n  onClick,\r\n  children,\r\n  disabled = false,\r\n  ...rest\r\n}: ButtonProps) => {\r\n  return (\r\n    <StyledButton\r\n      primary={primary}\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","const environment = {\r\n  apiKey: process.env.REACT_APP_MOVIEDB_KEY,\r\n  baseURL: process.env.REACT_APP_BASEURL,\r\n  imageBaseURL: process.env.REACT_APP_IMG_BASEURL,\r\n};\r\nexport default environment;\r\n","import { ImageType, Media } from '../types/common';\r\nimport { MovieResult } from '../types/Movies';\r\nimport { TVResult } from '../types/Tv';\r\nimport { ImageSize } from './constants';\r\nimport environment from './environment';\r\n\r\nconst { apiKey, baseURL, imageBaseURL } = environment;\r\n\r\nexport const getUrl = (path: string, queryString = ''): string =>\r\n  `${baseURL}${path}?api_key=${apiKey}${queryString}`;\r\n\r\nexport function getImageSrc(path: string, type: ImageType) {\r\n  const img = { src: '', srcset: '' };\r\n  if (path) {\r\n    img.src = `${imageBaseURL}original${path}`;\r\n    const sizes = ImageSize[type].filter((size) => size !== 'original');\r\n    const paths = sizes.map(\r\n      (size) => `${imageBaseURL}${size}${path} ${size.substring(1)}w`\r\n    );\r\n    img.srcset = paths.join(', ');\r\n  }\r\n  return img;\r\n}\r\n\r\nexport const getMoviesFromApiResult = (results: MovieResult[]): Media[] => {\r\n  const movies = results.map(\r\n    ({\r\n      title,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n      release_date,\r\n    }) => ({\r\n      title,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n      release_date,\r\n    })\r\n  );\r\n  return movies;\r\n};\r\n\r\nexport const getTVsFromApiResult = (results: TVResult[]): Media[] => {\r\n  const tvs = results.map(\r\n    ({\r\n      name,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n      first_air_date,\r\n    }) => ({\r\n      title: name,\r\n      release_date: first_air_date,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n    })\r\n  );\r\n  return tvs;\r\n};\r\n\r\nexport function debounce<T extends Function>(fn: T, time = 50) {\r\n  let timeout: NodeJS.Timeout;\r\n  return function (...args: any[]) {\r\n    if (timeout) {\r\n      clearTimeout(timeout);\r\n    }\r\n    timeout = setTimeout(() => {\r\n      fn(...args);\r\n      clearTimeout(timeout);\r\n    }, time);\r\n  };\r\n}\r\n\r\nexport const isTouchScreen = () => 'ontouchstart' in window;\r\n","import { ImageSize } from '../utils/constants';\r\n\r\nexport type ImageType = keyof typeof ImageSize;\r\n\r\nexport type Media = {\r\n  title: string;\r\n  id: number;\r\n  backdrop_path: string;\r\n  poster_path: string;\r\n  vote_average: number;\r\n  release_date: string;\r\n};\r\n\r\nexport enum MediaType {\r\n  Movie = 'movie',\r\n  Tv = 'tv',\r\n}\r\n\r\nexport enum MovieType {\r\n  Popular = 'popular',\r\n  Upcoming = 'upcoming',\r\n}\r\n\r\nexport type Genre = {\r\n  id: number;\r\n  name: string;\r\n};\r\n\r\nexport type Genres = Genre[];\r\n\r\nexport type State = {};\r\n\r\nexport interface AppContext extends State {\r\n  dispatch: React.Dispatch<any>;\r\n}\r\n","import { useRef, useState } from 'react';\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport styled from 'styled-components';\r\nimport { debounce, isTouchScreen } from '../utils/utils';\r\n\r\nconst Div = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nconst Arrow = styled.span<{ bsize: string; isHidden: boolean }>`\r\n  color: white;\r\n  background: rgba(20, 20, 20, 0.5);\r\n\r\n  cursor: pointer;\r\n  font-size: 6em;\r\n\r\n  position: absolute;\r\n  top: ${(props) => props.theme.size.xs};\r\n  height: ${(props) => props.bsize};\r\n  width: 4%;\r\n\r\n  text-align: center;\r\n  display: none;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  visibility: ${(props) => (props.isHidden ? 'hidden' : 'visible')};\r\n\r\n  &:nth-of-type(1) {\r\n    left: 0;\r\n  }\r\n\r\n  &:nth-of-type(2) {\r\n    right: 0;\r\n  }\r\n  ${Div}:hover & {\r\n    display: inline-flex;\r\n  }\r\n`;\r\n\r\nconst MediaScrollerUL = styled.ul`\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  gap: ${(props) => props.theme.size.xl};\r\n\r\n  padding-inline: ${(props) => props.theme.size.lg};\r\n  padding-block: ${(props) => props.theme.size.xs};\r\n\r\n  overflow-x: auto;\r\n  overscroll-behavior-inline: contain;\r\n  scroll-snap-type: inline mandatory;\r\n  scroll-padding-left: ${(props) => props.theme.size.xl};\r\n  scroll-padding-right: ${(props) => props.theme.size.xl};\r\n  scroll-padding-inline: ${(props) => props.theme.size.xl};\r\n\r\n  scrollbar-width: none;\r\n\r\n  &::-webkit-scrollbar {\r\n    width: 0;\r\n    height: 0;\r\n  }\r\n\r\n  @media (prefers-reduced-motion: no-preference) {\r\n    & {\r\n      scroll-behavior: smooth;\r\n    }\r\n  }\r\n`;\r\n\r\ntype MediaItemProps = {\r\n  inlineSize: string;\r\n};\r\n\r\nconst MediaItem = styled.li<MediaItemProps>`\r\n  display: inline-block;\r\n  inline-size: ${(props) => props.inlineSize};\r\n  block-size: min-content;\r\n`;\r\n\r\nconst Figure = styled.figure`\r\n  scroll-snap-align: start;\r\n\r\n  display: grid;\r\n  gap: calc(${(props) => props.theme.size.lg} / 2);\r\n  margin: 0;\r\n\r\n  cursor: pointer;\r\n  user-select: none;\r\n\r\n  outline-offset: 12px;\r\n\r\n  &:focus {\r\n    outline-offset: 7px;\r\n  }\r\n`;\r\n\r\ntype ImageProps = {\r\n  aspectRatio: Exclude<MediaScrollerProps['ratio'], typeof undefined>;\r\n  inlineSize: string;\r\n  blockSize: string;\r\n};\r\nconst Image = styled.img<ImageProps>`\r\n  inline-size: ${(props) => props.inlineSize};\r\n  block-size: ${(props) => props.blockSize};\r\n\r\n  aspect-ratio: ${(props) => props.aspectRatio};\r\n\r\n  object-fit: cover;\r\n\r\n  border-radius: 1ex;\r\n  border: none;\r\n  overflow: hidden;\r\n  background-image: ${(props) =>\r\n    `linear-gradient(to bottom, ${props.theme.colors.surface1}, ${props.theme.colors.surface2})`};\r\n`;\r\n\r\nconst Figcaption = styled.figcaption`\r\n  line-height: ${(props) => props.theme.size.md};\r\n  font-weight: 600;\r\n  font-size: ${(props) => props.theme.size.md};\r\n\r\n  & > p {\r\n    font-size: ${(props) => props.theme.size.sm};\r\n    font-weight: 400;\r\n    color: ${(props) => props.theme.colors.text2};\r\n    padding-block: ${(props) => props.theme.size.sm};\r\n  }\r\n`;\r\n\r\ntype ListItemType = {\r\n  id: number;\r\n  image: {\r\n    src: string;\r\n    srcset: string;\r\n  };\r\n  title: string;\r\n  caption?: string;\r\n};\r\n\r\ntype MediaScrollerProps = {\r\n  list: ListItemType[];\r\n  ratio?: '2/3' | '1/1' | '16/9';\r\n  loading?: boolean;\r\n};\r\n\r\nconst getHeightAndWidth = (ratio: MediaScrollerProps['ratio'] = '1/1') => {\r\n  const [widthRatio, heightRatio] = ratio.split('/').map((i) => +i);\r\n  const size = '10rem';\r\n  const height =\r\n    widthRatio > heightRatio ? size : `${(10 * heightRatio) / widthRatio}rem`;\r\n  const width =\r\n    widthRatio > heightRatio ? `${(10 * widthRatio) / heightRatio}rem` : size;\r\n  return [height, width];\r\n};\r\n\r\nconst MediaScroller = ({\r\n  list,\r\n  ratio = '1/1',\r\n  loading = false,\r\n}: MediaScrollerProps) => {\r\n  const [height, width] = getHeightAndWidth(ratio);\r\n  const mediaList = useRef<HTMLUListElement>(document.createElement('ul'));\r\n  const [isHiddenLeftArrow, setIsHiddenLeftArrow] = useState(true);\r\n  const [isHiddenRightArrow, setIsHiddenRightArrow] = useState(false);\r\n\r\n  const scrollToRight = () => {\r\n    const { offsetWidth, scrollLeft } = mediaList.current;\r\n    mediaList.current.scrollTo({\r\n      top: 0,\r\n      left: scrollLeft + offsetWidth,\r\n      behavior: 'smooth',\r\n    });\r\n  };\r\n\r\n  const scrollToLeft = () => {\r\n    const { offsetWidth, scrollLeft } = mediaList.current;\r\n    mediaList.current.scrollTo({\r\n      top: 0,\r\n      left: scrollLeft - offsetWidth,\r\n      behavior: 'smooth',\r\n    });\r\n  };\r\n\r\n  const handleScroll = () => {\r\n    const { offsetWidth, scrollLeft, scrollWidth } = mediaList.current;\r\n\r\n    if (offsetWidth + scrollLeft >= scrollWidth) {\r\n      setIsHiddenRightArrow(true);\r\n    } else if (isHiddenRightArrow) {\r\n      setIsHiddenRightArrow(false);\r\n    }\r\n\r\n    if (scrollLeft === 0) {\r\n      setIsHiddenLeftArrow(true);\r\n    } else if (isHiddenLeftArrow) {\r\n      setIsHiddenLeftArrow(false);\r\n    }\r\n  };\r\n\r\n  const data = loading\r\n    ? (Array(10).fill({ image: {} }) as ListItemType[])\r\n    : list;\r\n\r\n  return (\r\n    <Div>\r\n      {!loading && !isTouchScreen() && (\r\n        <>\r\n          <Arrow\r\n            bsize={height}\r\n            onClick={scrollToLeft}\r\n            isHidden={isHiddenLeftArrow}\r\n          >\r\n            ‹\r\n          </Arrow>\r\n          <Arrow\r\n            bsize={height}\r\n            onClick={scrollToRight}\r\n            isHidden={isHiddenRightArrow}\r\n          >\r\n            ›\r\n          </Arrow>\r\n        </>\r\n      )}\r\n      <MediaScrollerUL ref={mediaList} onScroll={debounce(handleScroll)}>\r\n        {data.map((item, index) => (\r\n          <ListItem\r\n            key={item.id || index}\r\n            item={item}\r\n            width={width}\r\n            height={height}\r\n            ratio={ratio}\r\n          />\r\n        ))}\r\n      </MediaScrollerUL>\r\n    </Div>\r\n  );\r\n};\r\n\r\nexport default MediaScroller;\r\n\r\ntype ListItemProps = {\r\n  item: ListItemType;\r\n  width: string;\r\n  height: string;\r\n  ratio: Exclude<MediaScrollerProps['ratio'], undefined>;\r\n};\r\n\r\nconst ListItem = ({ height, item, width, ratio }: ListItemProps) => {\r\n  return (\r\n    <MediaItem inlineSize={width}>\r\n      <Figure>\r\n        <picture>\r\n          {item.image.src ? (\r\n            <Image\r\n              aspectRatio={ratio}\r\n              inlineSize={width}\r\n              blockSize={height}\r\n              alt={item.title}\r\n              loading=\"lazy\"\r\n              srcSet={item.image.srcset}\r\n              src={item.image.src}\r\n            />\r\n          ) : (\r\n            <Skeleton width={width} height={height} />\r\n          )}\r\n        </picture>\r\n        <Figcaption>\r\n          {item.title || (\r\n            <>\r\n              <Skeleton />\r\n              <Skeleton width=\"65%\" />\r\n            </>\r\n          )}\r\n          {item.caption && <p>{item.caption}</p>}\r\n        </Figcaption>\r\n      </Figure>\r\n    </MediaItem>\r\n  );\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Header = styled.header`\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  align-items: center;\r\n  justify-content: start;\r\n  padding-inline: ${(props) => props.theme.size.lg};\r\n  padding-block: ${(props) => props.theme.size.xs};\r\n  grid-gap: ${(props) => props.theme.size.xs};\r\n\r\n  & h1 {\r\n    font-size: ${(props) => props.theme.size.xl};\r\n  }\r\n`;\r\n\r\nexport const ButtonContainer = styled.div`\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  width: min-content;\r\n  border-radius: ${(props) => props.theme.size.md};\r\n  border: 1px solid ${({ theme }) => theme.colors.text1};\r\n\r\n  & > button {\r\n    border: none;\r\n    border-radius: inherit;\r\n  }\r\n`;\r\n","export const fetcher = async (url: string) => {\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (e) {\r\n    throw new Error('Api Error');\r\n  }\r\n};\r\n\r\nexport const multiFetcher = (...urls: string[]) =>\r\n  Promise.all(urls.map(fetcher));\r\n","import { useQuery } from 'react-query';\r\nimport { fetcher } from '../../services/api';\r\nimport { Media, MediaType } from '../../types/common';\r\nimport { GenreMovies } from '../../types/Movies';\r\nimport { GenreTv } from '../../types/Tv';\r\nimport {\r\n  getMoviesFromApiResult,\r\n  getTVsFromApiResult,\r\n  getUrl,\r\n} from '../../utils/utils';\r\n\r\nfunction useContentByGenre(type: MediaType, genreId: number) {\r\n  return useQuery<\r\n    GenreMovies | GenreTv,\r\n    string,\r\n    Media[],\r\n    ['genre', MediaType, number]\r\n  >(\r\n    ['genre', type, genreId],\r\n    () => fetcher(getUrl(`discover/${type}`, `&with_genres=${genreId}`)),\r\n    {\r\n      select: (data) => {\r\n        return type === MediaType.Movie\r\n          ? getMoviesFromApiResult((data as GenreMovies).results)\r\n          : getTVsFromApiResult((data as GenreTv).results);\r\n      },\r\n    }\r\n  );\r\n}\r\n\r\nexport default useContentByGenre;\r\n","import { useQuery } from 'react-query';\r\nimport { multiFetcher } from '../../services/api';\r\nimport { Genres } from '../../types/common';\r\nimport { getUrl } from '../../utils/utils';\r\n\r\nfunction useGenres() {\r\n  return useQuery<\r\n    { genres: Genres }[],\r\n    string,\r\n    { tvGenres: Genres; movieGenres: Genres },\r\n    'genres'\r\n  >(\r\n    'genres',\r\n    () => multiFetcher(getUrl('genre/tv/list'), getUrl('genre/movie/list')),\r\n    {\r\n      select: (data) => {\r\n        const [tv, movie] = data;\r\n        return { tvGenres: tv.genres, movieGenres: movie.genres };\r\n      },\r\n    }\r\n  );\r\n}\r\n\r\nexport default useGenres;\r\n","import { useEffect, useRef, useState } from 'react';\r\n\r\ninterface Options extends IntersectionObserverInit {\r\n  triggerOnce?: boolean;\r\n}\r\n\r\nconst useInView = ({\r\n  triggerOnce,\r\n  threshold = 0,\r\n  root = null,\r\n  rootMargin = '0%',\r\n}: Options) => {\r\n  const ref = useRef<any>(null);\r\n  const [inView, setInView] = useState(false);\r\n  useEffect(() => {\r\n    const node = ref?.current; // DOM Ref\r\n    const hasIOSupport = !!window.IntersectionObserver;\r\n\r\n    if (!hasIOSupport || !node) return;\r\n\r\n    const observer = new IntersectionObserver(\r\n      (entries, observer) => {\r\n        entries.forEach((entry) => {\r\n          setInView(entry.isIntersecting);\r\n          // after inView and triggeronce disconnect\r\n          if (entry.isIntersecting && triggerOnce) {\r\n            observer.disconnect();\r\n          }\r\n        });\r\n      },\r\n      { root, rootMargin, threshold }\r\n    );\r\n\r\n    observer.observe(node);\r\n\r\n    return () => observer.disconnect();\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return { ref, inView };\r\n};\r\n\r\nexport default useInView;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../Elements/Button';\r\nimport MediaScroller from '../Elements/MediaScroller';\r\nimport { ButtonContainer, Header } from '../Elements/StyledElements';\r\nimport useContentByGenre from '../hooks/data/useContentByGenre';\r\nimport useGenres from '../hooks/data/useGenres';\r\nimport useInView from '../hooks/useInView';\r\nimport { Genre, MediaType } from '../types/common';\r\nimport { getImageSrc } from '../utils/utils';\r\n\r\nconst ContentByGenres = () => {\r\n  const { data, isLoading } = useGenres();\r\n  const { tvGenres = [], movieGenres = [] } = data || {};\r\n  const tvGenresId = tvGenres.map(({ id }) => id);\r\n  const commonGenres = movieGenres.filter(({ id }) => tvGenresId.includes(id));\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <MediaScroller list={[]} loading ratio={'2/3'} />\r\n      ) : (\r\n        commonGenres.map((genre, index) => (\r\n          <GenreSectionWrapper genre={genre} key={genre.id} index={index} />\r\n        ))\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst Section = styled.section<{ isBackdrop: boolean }>`\r\n  background-image: ${(props) =>\r\n    props.isBackdrop\r\n      ? `linear-gradient(\r\n      to bottom,\r\n      ${props.theme.colors.surface2},\r\n      ${props.theme.colors.surface3}\r\n    )`\r\n      : 'none'};\r\n`;\r\ntype GenreSectionWrapperProps = { genre: Genre; index: number };\r\n\r\nconst GenreSectionWrapper = ({ genre, index }: GenreSectionWrapperProps) => {\r\n  const { ref, inView } = useInView({ triggerOnce: true });\r\n  const [selectedMedia, setSelectedMedia] = useState<MediaType>(\r\n    MediaType.Movie\r\n  );\r\n\r\n  const isBackdrop = index % 2 === 1;\r\n  return (\r\n    <Section ref={ref} isBackdrop={isBackdrop}>\r\n      <Header>\r\n        <h1>{genre.name}</h1>\r\n        <ButtonContainer>\r\n          <Button\r\n            primary={selectedMedia === MediaType.Movie}\r\n            onClick={() => setSelectedMedia(MediaType.Movie)}\r\n          >\r\n            {MediaType.Movie}\r\n          </Button>\r\n          <Button\r\n            primary={selectedMedia === MediaType.Tv}\r\n            onClick={() => setSelectedMedia(MediaType.Tv)}\r\n          >\r\n            {MediaType.Tv}\r\n          </Button>\r\n        </ButtonContainer>\r\n      </Header>\r\n      {inView ? (\r\n        <GenreSection\r\n          genreId={genre.id}\r\n          selectedMedia={selectedMedia}\r\n          isBackdrop={isBackdrop}\r\n        />\r\n      ) : (\r\n        <MediaScroller list={[]} loading ratio={isBackdrop ? '16/9' : '2/3'} />\r\n      )}\r\n    </Section>\r\n  );\r\n};\r\ntype GenreSectionProps = {\r\n  genreId: number;\r\n  selectedMedia: MediaType;\r\n  isBackdrop: boolean;\r\n};\r\nconst GenreSection = ({\r\n  genreId,\r\n  selectedMedia,\r\n  isBackdrop,\r\n}: GenreSectionProps) => {\r\n  const { data = [], isLoading } = useContentByGenre(selectedMedia, genreId);\r\n\r\n  const mediaScrollerList =\r\n    data.map(({ id, title, poster_path, backdrop_path, release_date }) => ({\r\n      id,\r\n      title,\r\n      image: getImageSrc(\r\n        isBackdrop ? backdrop_path : poster_path,\r\n        isBackdrop ? 'backdrop' : 'poster'\r\n      ),\r\n      caption: new Date(release_date).toLocaleDateString('en-us', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric',\r\n      }),\r\n    })) || [];\r\n\r\n  return (\r\n    <MediaScroller\r\n      list={mediaScrollerList}\r\n      ratio={isBackdrop ? '16/9' : '2/3'}\r\n      loading={isLoading}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ContentByGenres;\r\n","import { useQuery } from 'react-query';\r\nimport { fetcher } from '../../services/api';\r\nimport { Media, MovieType } from '../../types/common';\r\nimport { PopularMovies, UpcomingMovies } from '../../types/Movies';\r\nimport { getMoviesFromApiResult, getUrl } from '../../utils/utils';\r\n\r\nfunction useDiscoverMovies(type: MovieType) {\r\n  return useQuery<\r\n    UpcomingMovies | PopularMovies,\r\n    string,\r\n    Media[],\r\n    ['movies', MovieType]\r\n  >(['movies', type], () => fetcher(getUrl(`movie/${type}`)), {\r\n    select: (data) => {\r\n      return type === MovieType.Upcoming\r\n        ? getMoviesFromApiResult((data as UpcomingMovies).results)\r\n        : getMoviesFromApiResult((data as PopularMovies).results);\r\n    },\r\n  });\r\n}\r\n\r\nexport default useDiscoverMovies;\r\n","import { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../Elements/Button';\r\nimport MediaScroller from '../Elements/MediaScroller';\r\nimport { ButtonContainer, Header } from '../Elements/StyledElements';\r\nimport useDiscoverMovies from '../hooks/data/useDiscoverMovies';\r\nimport { MovieType } from '../types/common';\r\nimport { getImageSrc } from '../utils/utils';\r\n\r\nconst Section = styled.section`\r\n  background-image: linear-gradient(\r\n    to bottom,\r\n    ${(props) => props.theme.colors.surface2},\r\n    ${(props) => props.theme.colors.surface3}\r\n  );\r\n`;\r\n\r\nconst DiscoverMovies = () => {\r\n  const [movieType, setMovieType] = useState<MovieType>(MovieType.Popular);\r\n\r\n  const { data = [], isLoading } = useDiscoverMovies(movieType);\r\n\r\n  const mediaScrollerList = data.map(\r\n    ({ id, title, backdrop_path, release_date }) => ({\r\n      id,\r\n      title,\r\n      image: getImageSrc(backdrop_path, 'backdrop'),\r\n      caption: new Date(release_date).toLocaleDateString('en-us', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric',\r\n      }),\r\n    })\r\n  );\r\n\r\n  const handleButton = () =>\r\n    setMovieType(\r\n      movieType === MovieType.Popular ? MovieType.Upcoming : MovieType.Popular\r\n    );\r\n  return (\r\n    <Section id=\"discover-movies\">\r\n      <Header>\r\n        <h1>Discover Movies</h1>\r\n        <ButtonContainer>\r\n          <Button\r\n            primary={movieType === MovieType.Popular}\r\n            disabled={movieType === MovieType.Popular}\r\n            onClick={handleButton}\r\n          >\r\n            Popular\r\n          </Button>\r\n          <Button\r\n            primary={movieType === MovieType.Upcoming}\r\n            disabled={movieType === MovieType.Upcoming}\r\n            onClick={handleButton}\r\n          >\r\n            Upcoming\r\n          </Button>\r\n        </ButtonContainer>\r\n      </Header>\r\n\r\n      <MediaScroller\r\n        list={mediaScrollerList}\r\n        loading={isLoading}\r\n        ratio=\"16/9\"\r\n      />\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport default DiscoverMovies;\r\n","import { useQuery } from 'react-query';\r\nimport { fetcher } from '../../services/api';\r\nimport { Media, MediaType } from '../../types/common';\r\nimport { TrendingMovies } from '../../types/Movies';\r\nimport { TrendingTv } from '../../types/Tv';\r\nimport {\r\n  getMoviesFromApiResult,\r\n  getTVsFromApiResult,\r\n  getUrl,\r\n} from '../../utils/utils';\r\n\r\nfunction useTrending(type: MediaType) {\r\n  return useQuery<\r\n    TrendingMovies | TrendingTv,\r\n    string,\r\n    Media[],\r\n    ['trending', MediaType]\r\n  >(['trending', type], () => fetcher(getUrl(`trending/${type}/day`)), {\r\n    select: (data) => {\r\n      return type === MediaType.Movie\r\n        ? getMoviesFromApiResult((data as TrendingMovies).results)\r\n        : getTVsFromApiResult((data as TrendingTv).results);\r\n    },\r\n  });\r\n}\r\n\r\nexport default useTrending;\r\n","import React, { useState } from 'react';\r\nimport Button from '../Elements/Button';\r\nimport MediaScroller from '../Elements/MediaScroller';\r\nimport { ButtonContainer, Header } from '../Elements/StyledElements';\r\nimport useTrending from '../hooks/data/useTrending';\r\nimport { MediaType } from '../types/common';\r\nimport { getImageSrc } from '../utils/utils';\r\n\r\nconst Trending = () => {\r\n  const [selectedMedia, setSelectedMedia] = useState<MediaType>(\r\n    MediaType.Movie\r\n  );\r\n\r\n  const { data = [], isLoading } = useTrending(selectedMedia);\r\n\r\n  const mediaScrollerList = data.map(\r\n    ({ id, title, poster_path, release_date }) => ({\r\n      id,\r\n      title,\r\n      image: getImageSrc(poster_path, 'poster'),\r\n      caption: new Date(release_date).toLocaleDateString('en-us', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric',\r\n      }),\r\n    })\r\n  );\r\n\r\n  const handleButton = () =>\r\n    setSelectedMedia(\r\n      selectedMedia === MediaType.Movie ? MediaType.Tv : MediaType.Movie\r\n    );\r\n\r\n  return (\r\n    <section id=\"trending\">\r\n      <Header>\r\n        <h1>Trending</h1>\r\n        <ButtonContainer>\r\n          <Button\r\n            primary={selectedMedia === MediaType.Movie}\r\n            disabled={selectedMedia === MediaType.Movie}\r\n            onClick={handleButton}\r\n          >\r\n            {MediaType.Movie}\r\n          </Button>\r\n          <Button\r\n            primary={selectedMedia === MediaType.Tv}\r\n            disabled={selectedMedia === MediaType.Tv}\r\n            onClick={handleButton}\r\n          >\r\n            {MediaType.Tv}\r\n          </Button>\r\n        </ButtonContainer>\r\n      </Header>\r\n\r\n      <MediaScroller list={mediaScrollerList} ratio=\"2/3\" loading={isLoading} />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Trending;\r\n","import { useEffect, useState } from 'react';\r\n\r\nconst useDarkMode = () => {\r\n  const darkModeQuery = window?.matchMedia('(prefers-color-scheme: dark)');\r\n  const [isDarkMode, setIsDarkMode] = useState(darkModeQuery?.matches);\r\n  useEffect(() => {\r\n    const darkModeHandler = ({ matches }: MediaQueryListEvent): void =>\r\n      setIsDarkMode(matches);\r\n    darkModeQuery?.addListener(darkModeHandler);\r\n    return () => darkModeQuery.removeEventListener('change', darkModeHandler);\r\n  }, [darkModeQuery]);\r\n\r\n  return isDarkMode;\r\n};\r\n\r\nexport default useDarkMode;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const getTheme = (isDarkMode = false) => {\r\n  /* brand foundation */\r\n  const hue = '200';\r\n  const saturation = '100%';\r\n  const lightness = '50%';\r\n\r\n  /* light */\r\n  const light = {\r\n    brand: `hsl(${hue} ${saturation} ${lightness}`,\r\n    text1: `hsl(${hue} ${saturation} 10%)`,\r\n    text2: `hsl(${hue} 30% 30%)`,\r\n    surface1: `hsl(${hue} 25% 90%)`,\r\n    surface2: `hsl(${hue} 20% 99%)`,\r\n    surface3: `hsl(${hue} 20% 92%)`,\r\n    surface4: `hsl(${hue} 20% 85%)`,\r\n    surfaceShadow: `hsl(${hue} 10% 20%)`,\r\n    shadowStrength: '0.02',\r\n  };\r\n\r\n  const dark = {\r\n    brand: `hsl(${hue} calc(${saturation} / 2) calc(${lightness} / 1.5))`,\r\n    text1: `hsl(${hue} 15% 85%)`,\r\n    text2: `hsl(${hue} 5% 65%)`,\r\n    surface1: `hsl(${hue} 10% 10%)`,\r\n    surface2: `hsl(${hue} 10% 15%)`,\r\n    surface3: `hsl(${hue} 5% 20%)`,\r\n    surface4: `hsl(${hue} 5% 25%)`,\r\n    surfaceShadow: `hsl(${hue} 50% 3%)`,\r\n    shadowStrength: '0.8',\r\n  };\r\n\r\n  function sizeStepUp(n: number, up = true): string {\r\n    let result = 1;\r\n    const typeScale = 1.25;\r\n    while (n > 1) {\r\n      result = up ? result * typeScale : result / typeScale;\r\n      n--;\r\n    }\r\n    return `calc(1rem * ${result})`;\r\n  }\r\n\r\n  return {\r\n    colors: isDarkMode ? dark : light,\r\n    size: {\r\n      xxxs: sizeStepUp(5, false),\r\n      xxs: sizeStepUp(4, false),\r\n      xs: sizeStepUp(3, false),\r\n      sm: sizeStepUp(2, false),\r\n      md: sizeStepUp(1),\r\n      lg: sizeStepUp(2),\r\n      xl: sizeStepUp(3),\r\n      xxl: sizeStepUp(4),\r\n      xxxl: sizeStepUp(5),\r\n    },\r\n    mediaQueries: {\r\n      below1400: 'only screen and (max-width: 1400px)',\r\n      below768: 'only screen and (max-width: 768px)',\r\n      below375: 'only screen and (max-width: 375px)',\r\n    },\r\n  };\r\n};\r\n\r\nconst theme = getTheme();\r\ntype ThemeType = typeof theme;\r\ndeclare module 'styled-components' {\r\n  export interface DefaultTheme extends ThemeType {}\r\n}\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  html {\r\n    /* grow as per screen width */\r\n    font-size: calc(1px + 1vw);\r\n    line-height: calc(1.5rem + 0.5vw);\r\n    block-size: 100%;\r\n    background-color: ${({ theme }) => theme.colors.surface1};\r\n    color: ${({ theme }) => theme.colors.text1};\r\n    font-family: 'Roboto Mono', monospace, system-ui, sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n\r\n    @media ${({ theme }) => theme.mediaQueries.below1400} {\r\n      font-size: 16px;\r\n    }\r\n\r\n    @media ${({ theme }) => theme.mediaQueries.below768} {\r\n      font-size: 14px;\r\n    }\r\n\r\n    @media ${({ theme }) => theme.mediaQueries.below375} {\r\n      font-size: 12px;\r\n    }\r\n  }\r\n\r\n  body {\r\n    background-color: ${({ theme }) => theme.colors.surface1};\r\n  }\r\n\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n","import React from 'react';\nimport { SkeletonTheme } from 'react-loading-skeleton';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { ThemeProvider } from 'styled-components';\nimport { AppContextProvider } from './AppContext';\nimport ContentByGenres from './Components/ContentByGenres';\nimport DiscoverMovies from './Components/DiscoverMovies';\nimport Trending from './Components/Trending';\nimport useDarkMode from './hooks/useDarkMode';\nimport { getTheme, GlobalStyles } from './styles/theme';\n\nfunction App() {\n  const isDarkMode = useDarkMode();\n  const theme = getTheme(isDarkMode);\n\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        refetchOnWindowFocus: false,\n        staleTime: Infinity,\n      },\n    },\n  });\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyles />\n      <AppContextProvider>\n        <SkeletonTheme\n          color={theme.colors.surface2}\n          highlightColor={theme.colors.surface1}\n        >\n          <QueryClientProvider client={queryClient}>\n            <Trending />\n            <DiscoverMovies />\n            <ContentByGenres />\n          </QueryClientProvider>\n        </SkeletonTheme>\n      </AppContextProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}