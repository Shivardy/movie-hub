{"version":3,"sources":["services/appReducer.ts","utils/constants.ts","AppContext.tsx","hooks/createContext.tsx","Elements/Button.tsx","hooks/useClickOutside.tsx","icons/ArrowDown.tsx","icons/ArrowUp.tsx","utils/environment.ts","utils/utils.ts","types/common.ts","Elements/ButtonGroup.tsx","icons/ArrowLeft.tsx","icons/ArrowRight.tsx","Elements/MediaScroller.tsx","Elements/StyledElements.tsx","services/api.ts","hooks/data/useContentByGenre.tsx","hooks/data/useGenres.tsx","hooks/useInView.tsx","Components/ContentByGenres.tsx","hooks/data/useDiscoverMovies.tsx","Components/DiscoverMovies.tsx","hooks/data/useTrending.tsx","Components/Trending.tsx","hooks/useDarkMode.tsx","styles/theme.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["appReducer","state","action","initialState","movies","upcoming","popular","trending","genres","tv","ImageSize","poster","backdrop","profile","ctx","React","undefined","c","Error","Provider","createContext","AppProvider","AppContextProvider","children","useReducer","dispatch","value","StyledButton","styled","button","theme","primary","colors","surface1","text1","props","size","xs","xxxs","md","Button","forwardRef","ref","onClick","disabled","rest","useClickOutside","callback","useEffect","listener","event","el","current","contains","target","document","addEventListener","removeEventListener","ArrowDown","xmlns","className","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","ArrowUp","environment","apiKey","process","baseURL","imageBaseURL","getUrl","path","queryString","getImageSrc","type","img","src","srcset","paths","filter","map","substring","join","getMoviesFromApiResult","results","title","id","backdrop_path","poster_path","vote_average","release_date","getTVsFromApiResult","name","first_air_date","debounce","fn","timeout","time","args","clearTimeout","setTimeout","MediaType","MovieType","isSelected","text2","surface4","IconButton","isHidden","ButtonWrapper","div","lg","DropDown","surface3","DropDownContainer","ButtonGroup","items","containerRef","useRef","iconRef","dropDownRef","buttonRefs","useState","hiddenItems","setHiddenItems","open","setOpen","handleDropDown","onWindowResize","useCallback","container","containerWidth","offsetWidth","occupiedWidth","lastVisible","forEach","element","index","width","elem","style","window","getComputedStyle","parseInt","marginLeft","marginRight","getWidthAndHorizontalMargins","setAttribute","push","left","offsetLeft","clientWidth","debouncedFunc","item","i","label","length","e","ArrowLeft","ArrowRight","Div","Arrow","span","bsize","MediaScrollerUL","ul","xl","MediaItem","li","inlineSize","Figure","figure","Image","blockSize","aspectRatio","surface2","Figcaption","figcaption","sm","MediaScroller","list","ratio","loading","split","widthRatio","heightRatio","height","getHeightAndWidth","mediaList","createElement","isHiddenLeftArrow","setIsHiddenLeftArrow","isHiddenRightArrow","setIsHiddenRightArrow","data","Array","image","scrollLeft","scrollTo","top","behavior","onScroll","scrollWidth","ListItem","alt","srcSet","caption","Header","header","ButtonContainer","fetcher","url","a","fetch","response","json","useContentByGenre","genreId","enabled","useQuery","select","Movie","useGenres","urls","Promise","all","multiFetcher","movie","tvGenres","movieGenres","useInView","triggerOnce","threshold","root","rootMargin","inView","setInView","node","IntersectionObserver","observer","entries","entry","isIntersecting","disconnect","observe","Section","section","isBackdrop","GenreSection","genre","selectedMedia","setSelectedMedia","isLoading","mediaScrollerList","Date","toLocaleDateString","year","month","day","Tv","ContentByGenres","tvGenresId","commonGenres","includes","selectedButtonId","setSelectedButtonId","buttonListItems","useMemo","buttonId","currentTarget","dataset","genreData","genreDataIsLoading","useDiscoverMovies","Upcoming","DiscoverMovies","Popular","movieType","setMovieType","handleButton","useTrending","Trending","useDarkMode","darkModeQuery","matchMedia","matches","isDarkMode","setIsDarkMode","darkModeHandler","addListener","getTheme","hue","saturation","lightness","light","brand","surfaceShadow","shadowStrength","dark","sizeStepUp","n","up","result","typeScale","xxs","xxl","xxxl","mediaQueries","below1400","below768","below375","GlobalStyles","createGlobalStyle","App","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","staleTime","Infinity","color","highlightColor","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0cfb7dcf.chunk.js","sourcesContent":["import { State } from '../types/common';\r\n\r\nexport default function appReducer(state: State, action: any): State {\r\n  return state;\r\n}\r\n","import { State } from '../types/common';\r\n\r\nexport const initialState: State = {\r\n  movies: {\r\n    upcoming: [],\r\n    popular: [],\r\n    trending: [],\r\n    genres: [],\r\n  },\r\n  tv: {\r\n    trending: [],\r\n    genres: [],\r\n  },\r\n};\r\n\r\nexport const ImageSize = {\r\n  poster: ['w92', 'w154', 'w185', 'w342', 'w500', 'w780', 'original'],\r\n  backdrop: ['w300', 'w780', 'w1280', 'original'],\r\n  profile: ['w45', 'w185', 'original'],\r\n};\r\n","import { useReducer } from 'react';\r\nimport createContext from './hooks/createContext';\r\nimport appReducer from './services/appReducer';\r\nimport { AppContext } from './types/common';\r\nimport { initialState } from './utils/constants';\r\n\r\nconst [appContext, AppProvider] = createContext<AppContext>();\r\n\r\nexport const AppContextProvider = ({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) => {\r\n  const [state, dispatch] = useReducer(appReducer, initialState);\r\n  return <AppProvider value={{ ...state, dispatch }}>{children}</AppProvider>;\r\n};\r\n\r\nexport { appContext };\r\n","import * as React from 'react';\r\n\r\nexport default function createContext<A extends {} | null>() {\r\n  const ctx = React.createContext<A | undefined>(undefined);\r\n\r\n  const useContext = () => {\r\n    const c = React.useContext(ctx);\r\n    if (c === undefined)\r\n      throw new Error('useContext must be inside a Provider with a value');\r\n    return c;\r\n  };\r\n  return [useContext, ctx.Provider] as const;\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ntype StyledButtonProps = { primary: boolean };\r\nconst StyledButton = styled.button<StyledButtonProps>`\r\n  min-width: max-content;\r\n  height: min-content;\r\n  color: ${({ theme, primary }) => {\r\n    if (primary) {\r\n      return theme.colors.surface1;\r\n    }\r\n    return theme.colors.text1;\r\n  }};\r\n\r\n  border-radius: ${(props) => props.theme.size.xs};\r\n  border: 1px solid ${({ theme }) => theme.colors.text1};\r\n  font-weight: 600;\r\n\r\n  background-color: ${({ theme, primary }) => {\r\n    if (primary) {\r\n      return theme.colors.text1;\r\n    }\r\n    return 'inherit';\r\n  }};\r\n\r\n  text-transform: capitalize;\r\n  cursor: pointer;\r\n\r\n  padding-block: ${(props) => props.theme.size.xxxs};\r\n  padding-inline: ${(props) => props.theme.size.md};\r\n`;\r\n\r\ntype ButtonOwnProps = {\r\n  onClick: React.MouseEventHandler<HTMLButtonElement>;\r\n  children: React.ReactNode;\r\n  primary?: boolean;\r\n};\r\n\r\ntype ButtonProps = ButtonOwnProps &\r\n  React.ButtonHTMLAttributes<HTMLButtonElement>;\r\n\r\nconst Button = React.forwardRef(\r\n  (\r\n    {\r\n      primary = true,\r\n      onClick,\r\n      children,\r\n      disabled = false,\r\n      ...rest\r\n    }: ButtonProps,\r\n    ref: React.Ref<HTMLButtonElement>\r\n  ) => {\r\n    return (\r\n      <StyledButton\r\n        ref={ref}\r\n        primary={primary}\r\n        onClick={onClick}\r\n        disabled={disabled}\r\n        {...rest}\r\n      >\r\n        {children}\r\n      </StyledButton>\r\n    );\r\n  }\r\n);\r\n\r\nexport default Button;\r\n","import { RefObject, useEffect } from 'react';\r\n\r\ntype AnyEvent = MouseEvent | TouchEvent;\r\nfunction useClickOutside<T extends HTMLElement = HTMLElement>(\r\n  ref: RefObject<T>,\r\n  callback: (event: AnyEvent) => void\r\n) {\r\n  useEffect(() => {\r\n    const listener = (event: AnyEvent) => {\r\n      const el = ref?.current;\r\n\r\n      // Do nothing if clicking ref's element or descendent elements\r\n      if (!el || el.contains(event.target as Node)) {\r\n        return;\r\n      }\r\n\r\n      callback(event);\r\n    };\r\n\r\n    document.addEventListener(`mousedown`, listener);\r\n    document.addEventListener(`touchstart`, listener);\r\n\r\n    return () => {\r\n      document.removeEventListener(`mousedown`, listener);\r\n      document.removeEventListener(`touchstart`, listener);\r\n    };\r\n\r\n    // Reload only if ref or handler changes\r\n  }, [ref, callback]);\r\n}\r\n\r\nexport default useClickOutside;\r\n","const ArrowDown = () => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    className=\"h-6 w-6\"\r\n    fill=\"none\"\r\n    viewBox=\"0 0 24 24\"\r\n    stroke=\"currentColor\"\r\n  >\r\n    <path\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n      strokeWidth={5}\r\n      d=\"M19 9l-7 7-7-7\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport default ArrowDown;\r\n","const ArrowUp = () => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    className=\"h-6 w-6\"\r\n    fill=\"none\"\r\n    viewBox=\"0 0 24 24\"\r\n    stroke=\"currentColor\"\r\n  >\r\n    <path\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n      strokeWidth={5}\r\n      d=\"M5 15l7-7 7 7\"\r\n    />\r\n  </svg>\r\n);\r\nexport default ArrowUp;\r\n","const environment = {\r\n  apiKey: process.env.REACT_APP_MOVIEDB_KEY,\r\n  baseURL: process.env.REACT_APP_BASEURL,\r\n  imageBaseURL: process.env.REACT_APP_IMG_BASEURL,\r\n};\r\nexport default environment;\r\n","import { ImageType, Media } from '../types/common';\r\nimport { MovieResult } from '../types/Movies';\r\nimport { TVResult } from '../types/Tv';\r\nimport { ImageSize } from './constants';\r\nimport environment from './environment';\r\n\r\nconst { apiKey, baseURL, imageBaseURL } = environment;\r\n\r\nexport const getUrl = (path: string, queryString = ''): string =>\r\n  `${baseURL}${path}?api_key=${apiKey}${queryString}`;\r\n\r\nexport function getImageSrc(path: string, type: ImageType) {\r\n  const img = { src: '', srcset: '' };\r\n  if (path) {\r\n    img.src = `${imageBaseURL}original${path}`;\r\n    const sizes = ImageSize[type].filter((size) => size !== 'original');\r\n    const paths = sizes.map(\r\n      (size) => `${imageBaseURL}${size}${path} ${size.substring(1)}w`\r\n    );\r\n    img.srcset = paths.join(', ');\r\n  }\r\n  return img;\r\n}\r\n\r\nexport const getMoviesFromApiResult = (results: MovieResult[]): Media[] => {\r\n  const movies = results.map(\r\n    ({\r\n      title,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n      release_date,\r\n    }) => ({\r\n      title,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n      release_date,\r\n    })\r\n  );\r\n  return movies;\r\n};\r\n\r\nexport const getTVsFromApiResult = (results: TVResult[]): Media[] => {\r\n  const tvs = results.map(\r\n    ({\r\n      name,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n      first_air_date,\r\n    }) => ({\r\n      title: name,\r\n      release_date: first_air_date,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n    })\r\n  );\r\n  return tvs;\r\n};\r\n\r\nexport function debounce<T extends Function>(fn: T, time = 50) {\r\n  let timeout: NodeJS.Timeout;\r\n  return function (...args: any[]) {\r\n    if (timeout) {\r\n      clearTimeout(timeout);\r\n    }\r\n    timeout = setTimeout(() => {\r\n      fn(...args);\r\n      clearTimeout(timeout);\r\n    }, time);\r\n  };\r\n}\r\n\r\nexport const isTouchScreen = () => 'ontouchstart' in window;\r\n","import { ImageSize } from '../utils/constants';\r\n\r\nexport type ImageType = keyof typeof ImageSize;\r\n\r\nexport type Media = {\r\n  title: string;\r\n  id: number;\r\n  backdrop_path: string;\r\n  poster_path: string;\r\n  vote_average: number;\r\n  release_date: string;\r\n};\r\n\r\nexport enum MediaType {\r\n  Movie = 'movie',\r\n  Tv = 'tv',\r\n}\r\n\r\nexport enum MovieType {\r\n  Popular = 'popular',\r\n  Upcoming = 'upcoming',\r\n}\r\n\r\nexport type Genre = {\r\n  id: number;\r\n  name: string;\r\n};\r\n\r\nexport type Genres = Genre[];\r\n\r\nexport type State = {};\r\n\r\nexport interface AppContext extends State {\r\n  dispatch: React.Dispatch<any>;\r\n}\r\n","import { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport useClickOutside from \"../hooks/useClickOutside\";\r\nimport ArrowDown from \"../icons/ArrowDown\";\r\nimport ArrowUp from \"../icons/ArrowUp\";\r\nimport { debounce } from \"../utils/utils\";\r\nimport Button from \"./Button\";\r\n\r\nconst StyledButton = styled(Button)<{ isSelected: boolean }>`\r\n  background-color: inherit;\r\n  border: none;\r\n  border-radius: unset;\r\n  color: ${({ isSelected, theme: { colors } }) =>\r\n    isSelected ? colors.text1 : colors.text2};\r\n  font-weight: ${({ isSelected }) => (isSelected ? 600 : 400)};\r\n\r\n  &:hover {\r\n    background-color: ${({ theme: { colors } }) => colors.surface4};\r\n  }\r\n\r\n  &[aria-hidden=\"true\"] {\r\n    visibility: hidden;\r\n  }\r\n`;\r\n\r\nconst IconButton = styled(Button)<{ isHidden: boolean }>`\r\n  border: none;\r\n  position: absolute;\r\n  background-color: inherit;\r\n  z-index: 1;\r\n  color: ${({ theme: { colors } }) => colors.text1};\r\n  visibility: ${(props) => (props.isHidden ? \"hidden\" : \"initial\")};\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: nowrap;\r\n  overflow-x: hidden;\r\n  border-bottom: 1px solid ${(props) => props.theme.colors.surface4};\r\n  margin-inline: ${(props) => props.theme.size.lg};\r\n  margin-block-end: ${(props) => props.theme.size.md};\r\n  padding-block: ${(props) => props.theme.size.xxxs};\r\n\r\n  & > button > svg {\r\n    width: 2ch;\r\n  }\r\n`;\r\n\r\nconst DropDown = styled.div`\r\n  background-color: ${(props) => props.theme.colors.surface3};\r\n  width: max-content;\r\n\r\n  position: absolute;\r\n  transform: translate(-60%, -20px);\r\n  z-index: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  max-block-size: 200px;\r\n  overflow-y: scroll;\r\n  scrollbar-width: none;\r\n\r\n  &::-webkit-scrollbar {\r\n    width: 0;\r\n    height: 0;\r\n  }\r\n\r\n  & > button {\r\n    width: 100%;\r\n    padding-block: ${(props) => props.theme.size.xs};\r\n    text-align: left;\r\n  }\r\n`;\r\n\r\nconst DropDownContainer = styled.div`\r\n  position: relative;\r\n  width: max-content;\r\n`;\r\n\r\nconst getWidthAndHorizontalMargins = (elem: HTMLElement) => {\r\n  const style = window.getComputedStyle(elem);\r\n  return (\r\n    elem.offsetWidth +\r\n    parseInt(style.marginLeft, 10) +\r\n    parseInt(style.marginRight, 10)\r\n  );\r\n};\r\ntype Item = {\r\n  id: number;\r\n  label: string;\r\n  isSelected: boolean;\r\n  onClick: React.MouseEventHandler<HTMLButtonElement>;\r\n};\r\ntype ButtonGroupProps = {\r\n  items: Item[];\r\n};\r\nconst ButtonGroup = ({ items }: ButtonGroupProps) => {\r\n  const containerRef = useRef<HTMLDivElement | null>(null);\r\n  const iconRef = useRef<HTMLButtonElement | null>(null);\r\n  const dropDownRef = useRef<HTMLDivElement | null>(null);\r\n  const buttonRefs = useRef<(HTMLButtonElement | null)[]>([]);\r\n  const [hiddenItems, setHiddenItems] = useState<Item[]>([]);\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleDropDown = () => setOpen(!open);\r\n\r\n  const onWindowResize = useCallback(() => {\r\n    // width of the container and icon\r\n    const container = containerRef.current;\r\n    if (container) {\r\n      const containerWidth = container.offsetWidth;\r\n      let occupiedWidth = iconRef.current?.offsetWidth || 0;\r\n\r\n      let lastVisible = buttonRefs.current[0];\r\n\r\n      let hiddenItems: Item[] = [];\r\n      buttonRefs.current.forEach((element, index) => {\r\n        if (element) {\r\n          const width = getWidthAndHorizontalMargins(element);\r\n          if (occupiedWidth + width <= containerWidth) {\r\n            element.setAttribute(\"aria-hidden\", \"false\");\r\n            lastVisible = element;\r\n          } else {\r\n            element.setAttribute(\"aria-hidden\", \"true\");\r\n            hiddenItems.push(items[index]);\r\n          }\r\n          occupiedWidth += width;\r\n        }\r\n      });\r\n\r\n      setHiddenItems(hiddenItems);\r\n      // based on last visible button set iconButton position\r\n      if (lastVisible && iconRef.current && dropDownRef.current) {\r\n        iconRef.current.style.left = `${\r\n          lastVisible.offsetLeft + lastVisible.clientWidth\r\n        }px`;\r\n        dropDownRef.current.style.left = `${iconRef.current.offsetLeft}px`;\r\n      }\r\n    }\r\n  }, [items]);\r\n\r\n  useEffect(() => {\r\n    onWindowResize();\r\n    const debouncedFunc = debounce(onWindowResize, 100);\r\n    window.addEventListener(\"resize\", debouncedFunc);\r\n    return () => {\r\n      window.removeEventListener(\"resize\", debouncedFunc);\r\n    };\r\n  }, [items, onWindowResize]);\r\n\r\n  useClickOutside(dropDownRef, () => open && handleDropDown());\r\n\r\n  return (\r\n    <>\r\n      <ButtonWrapper ref={containerRef}>\r\n        {items.map((item, i) => (\r\n          <StyledButton\r\n            key={item.id}\r\n            data-button-id={item.id}\r\n            onClick={item.onClick}\r\n            isSelected={item.isSelected}\r\n            ref={(ref) => (buttonRefs.current[i] = ref)}\r\n          >\r\n            {item.label}\r\n          </StyledButton>\r\n        ))}\r\n        <IconButton\r\n          onClick={handleDropDown}\r\n          ref={iconRef}\r\n          isHidden={hiddenItems.length === 0}\r\n        >\r\n          {open ? <ArrowUp /> : <ArrowDown />}\r\n        </IconButton>\r\n      </ButtonWrapper>\r\n\r\n      <DropDownContainer ref={dropDownRef}>\r\n        {open && (\r\n          <DropDown>\r\n            {hiddenItems.map((item) => (\r\n              <StyledButton\r\n                key={item.id}\r\n                onClick={(e) => item.onClick(e)}\r\n                data-button-id={item.id}\r\n                isSelected={item.isSelected}\r\n              >\r\n                {item.label}\r\n              </StyledButton>\r\n            ))}\r\n          </DropDown>\r\n        )}\r\n      </DropDownContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ButtonGroup;\r\n","const ArrowLeft = () => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    className=\"h-6 w-6\"\r\n    fill=\"none\"\r\n    viewBox=\"0 0 24 24\"\r\n    stroke=\"currentColor\"\r\n  >\r\n    <path\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n      strokeWidth={5}\r\n      d=\"M15 19l-7-7 7-7\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport default ArrowLeft;\r\n","const ArrowRight = () => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    className=\"h-6 w-6\"\r\n    fill=\"none\"\r\n    viewBox=\"0 0 24 24\"\r\n    stroke=\"currentColor\"\r\n  >\r\n    <path\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n      strokeWidth={5}\r\n      d=\"M9 5l7 7-7 7\"\r\n    />\r\n  </svg>\r\n);\r\nexport default ArrowRight;\r\n","import { useRef, useState } from 'react';\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport styled from 'styled-components';\r\nimport ArrowLeft from '../icons/ArrowLeft';\r\nimport ArrowRight from '../icons/ArrowRight';\r\nimport { debounce, isTouchScreen } from '../utils/utils';\r\n\r\nconst Div = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nconst Arrow = styled.span<{ bsize: string; isHidden: boolean }>`\r\n  color: white;\r\n  background: rgba(20, 20, 20, 0.5);\r\n\r\n  cursor: pointer;\r\n  font-size: 6em;\r\n\r\n  position: absolute;\r\n  top: ${(props) => props.theme.size.xs};\r\n  height: ${(props) => props.bsize};\r\n  width: 4%;\r\n\r\n  text-align: center;\r\n  display: none;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  visibility: ${(props) => (props.isHidden ? 'hidden' : 'visible')};\r\n\r\n  &:nth-of-type(1) {\r\n    left: 0;\r\n  }\r\n\r\n  &:nth-of-type(2) {\r\n    right: 0;\r\n  }\r\n  ${Div}:hover & {\r\n    display: inline-flex;\r\n  }\r\n`;\r\n\r\nconst MediaScrollerUL = styled.ul`\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  gap: ${(props) => props.theme.size.xl};\r\n\r\n  padding-inline: ${(props) => props.theme.size.lg};\r\n  padding-block: ${(props) => props.theme.size.xs};\r\n\r\n  overflow-x: auto;\r\n  overscroll-behavior-inline: contain;\r\n  scroll-snap-type: inline mandatory;\r\n  scroll-padding-left: ${(props) => props.theme.size.xl};\r\n  scroll-padding-right: ${(props) => props.theme.size.xl};\r\n  scroll-padding-inline: ${(props) => props.theme.size.xl};\r\n\r\n  scrollbar-width: none;\r\n\r\n  &::-webkit-scrollbar {\r\n    width: 0;\r\n    height: 0;\r\n  }\r\n\r\n  @media (prefers-reduced-motion: no-preference) {\r\n    & {\r\n      scroll-behavior: smooth;\r\n    }\r\n  }\r\n`;\r\n\r\ntype MediaItemProps = {\r\n  inlineSize: string;\r\n};\r\n\r\nconst MediaItem = styled.li<MediaItemProps>`\r\n  display: inline-block;\r\n  inline-size: ${(props) => props.inlineSize};\r\n  block-size: min-content;\r\n`;\r\n\r\nconst Figure = styled.figure`\r\n  scroll-snap-align: start;\r\n\r\n  display: grid;\r\n  gap: calc(${(props) => props.theme.size.lg} / 2);\r\n  margin: 0;\r\n\r\n  cursor: pointer;\r\n  user-select: none;\r\n\r\n  outline-offset: 12px;\r\n\r\n  &:focus {\r\n    outline-offset: 7px;\r\n  }\r\n`;\r\n\r\ntype ImageProps = {\r\n  aspectRatio: Exclude<MediaScrollerProps['ratio'], typeof undefined>;\r\n  inlineSize: string;\r\n  blockSize: string;\r\n};\r\nconst Image = styled.img<ImageProps>`\r\n  inline-size: ${(props) => props.inlineSize};\r\n  block-size: ${(props) => props.blockSize};\r\n\r\n  aspect-ratio: ${(props) => props.aspectRatio};\r\n\r\n  object-fit: cover;\r\n\r\n  border-radius: 1ex;\r\n  border: none;\r\n  overflow: hidden;\r\n  background-image: ${(props) =>\r\n    `linear-gradient(to bottom, ${props.theme.colors.surface1}, ${props.theme.colors.surface2})`};\r\n`;\r\n\r\nconst Figcaption = styled.figcaption`\r\n  line-height: ${(props) => props.theme.size.lg};\r\n  font-weight: 600;\r\n  font-size: ${(props) => props.theme.size.md};\r\n\r\n  & > p {\r\n    font-size: ${(props) => props.theme.size.sm};\r\n    font-weight: 400;\r\n    color: ${(props) => props.theme.colors.text2};\r\n    padding-block: ${(props) => props.theme.size.sm};\r\n  }\r\n`;\r\n\r\ntype ListItemType = {\r\n  id: number;\r\n  image: {\r\n    src: string;\r\n    srcset: string;\r\n  };\r\n  title: string;\r\n  caption?: string;\r\n};\r\n\r\ntype MediaScrollerProps = {\r\n  list: ListItemType[];\r\n  ratio?: '2/3' | '1/1' | '16/9';\r\n  loading?: boolean;\r\n};\r\n\r\nconst getHeightAndWidth = (ratio: MediaScrollerProps['ratio'] = '1/1') => {\r\n  const [widthRatio, heightRatio] = ratio.split('/').map((i) => +i);\r\n  const size = '10rem';\r\n  const height =\r\n    widthRatio > heightRatio ? size : `${(10 * heightRatio) / widthRatio}rem`;\r\n  const width =\r\n    widthRatio > heightRatio ? `${(10 * widthRatio) / heightRatio}rem` : size;\r\n  return [height, width];\r\n};\r\n\r\nconst MediaScroller = ({\r\n  list,\r\n  ratio = '1/1',\r\n  loading = false,\r\n}: MediaScrollerProps) => {\r\n  const [height, width] = getHeightAndWidth(ratio);\r\n  const mediaList = useRef<HTMLUListElement>(document.createElement('ul'));\r\n  const [isHiddenLeftArrow, setIsHiddenLeftArrow] = useState(true);\r\n  const [isHiddenRightArrow, setIsHiddenRightArrow] = useState(false);\r\n\r\n  const scrollToRight = () => {\r\n    const { offsetWidth, scrollLeft } = mediaList.current;\r\n    mediaList.current.scrollTo({\r\n      top: 0,\r\n      left: scrollLeft + offsetWidth,\r\n      behavior: 'smooth',\r\n    });\r\n  };\r\n\r\n  const scrollToLeft = () => {\r\n    const { offsetWidth, scrollLeft } = mediaList.current;\r\n    mediaList.current.scrollTo({\r\n      top: 0,\r\n      left: scrollLeft - offsetWidth,\r\n      behavior: 'smooth',\r\n    });\r\n  };\r\n\r\n  const handleScroll = () => {\r\n    const { offsetWidth, scrollLeft, scrollWidth } = mediaList.current;\r\n\r\n    if (offsetWidth + scrollLeft >= scrollWidth) {\r\n      setIsHiddenRightArrow(true);\r\n    } else if (isHiddenRightArrow) {\r\n      setIsHiddenRightArrow(false);\r\n    }\r\n\r\n    if (scrollLeft === 0) {\r\n      setIsHiddenLeftArrow(true);\r\n    } else if (isHiddenLeftArrow) {\r\n      setIsHiddenLeftArrow(false);\r\n    }\r\n  };\r\n\r\n  const data = loading\r\n    ? (Array(10).fill({ image: {} }) as ListItemType[])\r\n    : list;\r\n\r\n  return (\r\n    <Div>\r\n      {!loading && !isTouchScreen() && (\r\n        <>\r\n          <Arrow\r\n            bsize={height}\r\n            onClick={scrollToLeft}\r\n            isHidden={isHiddenLeftArrow}\r\n          >\r\n            <ArrowLeft />\r\n          </Arrow>\r\n          <Arrow\r\n            bsize={height}\r\n            onClick={scrollToRight}\r\n            isHidden={isHiddenRightArrow}\r\n          >\r\n            <ArrowRight />\r\n          </Arrow>\r\n        </>\r\n      )}\r\n      <MediaScrollerUL ref={mediaList} onScroll={debounce(handleScroll)}>\r\n        {data.map((item, index) => (\r\n          <ListItem\r\n            key={item.id || index}\r\n            item={item}\r\n            width={width}\r\n            height={height}\r\n            ratio={ratio}\r\n          />\r\n        ))}\r\n      </MediaScrollerUL>\r\n    </Div>\r\n  );\r\n};\r\n\r\nexport default MediaScroller;\r\n\r\ntype ListItemProps = {\r\n  item: ListItemType;\r\n  width: string;\r\n  height: string;\r\n  ratio: Exclude<MediaScrollerProps['ratio'], undefined>;\r\n};\r\n\r\nconst ListItem = ({ height, item, width, ratio }: ListItemProps) => {\r\n  return (\r\n    <MediaItem inlineSize={width}>\r\n      <Figure>\r\n        <picture>\r\n          {item.image.src ? (\r\n            <Image\r\n              aspectRatio={ratio}\r\n              inlineSize={width}\r\n              blockSize={height}\r\n              alt={item.title}\r\n              loading=\"lazy\"\r\n              srcSet={item.image.srcset}\r\n              src={item.image.src}\r\n            />\r\n          ) : (\r\n            <Skeleton width={width} height={height} />\r\n          )}\r\n        </picture>\r\n        <Figcaption>\r\n          {item.title || (\r\n            <>\r\n              <Skeleton />\r\n              <Skeleton width=\"65%\" />\r\n            </>\r\n          )}\r\n          {item.caption && <p>{item.caption}</p>}\r\n        </Figcaption>\r\n      </Figure>\r\n    </MediaItem>\r\n  );\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Header = styled.header`\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  align-items: center;\r\n  justify-content: start;\r\n  padding-inline: ${(props) => props.theme.size.lg};\r\n  padding-block: ${(props) => props.theme.size.xs};\r\n  grid-gap: ${(props) => props.theme.size.xs};\r\n\r\n  & h1 {\r\n    font-size: ${(props) => props.theme.size.xl};\r\n  }\r\n`;\r\n\r\nexport const ButtonContainer = styled.div`\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  width: min-content;\r\n  border-radius: ${(props) => props.theme.size.md};\r\n  border: 1px solid ${({ theme }) => theme.colors.text1};\r\n\r\n  & > button {\r\n    border: none;\r\n    border-radius: inherit;\r\n  }\r\n`;\r\n","export const fetcher = async (url: string) => {\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (e) {\r\n    throw new Error('Api Error');\r\n  }\r\n};\r\n\r\nexport const multiFetcher = (...urls: string[]) =>\r\n  Promise.all(urls.map(fetcher));\r\n","import { useQuery } from 'react-query';\r\nimport { fetcher } from '../../services/api';\r\nimport { Media, MediaType } from '../../types/common';\r\nimport { GenreMovies } from '../../types/Movies';\r\nimport { GenreTv } from '../../types/Tv';\r\nimport {\r\n  getMoviesFromApiResult,\r\n  getTVsFromApiResult,\r\n  getUrl,\r\n} from '../../utils/utils';\r\n\r\nfunction useContentByGenre(type: MediaType, genreId: number, enabled = false) {\r\n  return useQuery<\r\n    GenreMovies | GenreTv,\r\n    string,\r\n    Media[],\r\n    ['genre', MediaType, number]\r\n  >(\r\n    ['genre', type, genreId],\r\n    () => fetcher(getUrl(`discover/${type}`, `&with_genres=${genreId}`)),\r\n    {\r\n      select: (data) => {\r\n        return type === MediaType.Movie\r\n          ? getMoviesFromApiResult((data as GenreMovies).results)\r\n          : getTVsFromApiResult((data as GenreTv).results);\r\n      },\r\n      enabled,\r\n    }\r\n  );\r\n}\r\n\r\nexport default useContentByGenre;\r\n","import { useQuery } from 'react-query';\r\nimport { multiFetcher } from '../../services/api';\r\nimport { Genres } from '../../types/common';\r\nimport { getUrl } from '../../utils/utils';\r\n\r\nfunction useGenres() {\r\n  return useQuery<\r\n    { genres: Genres }[],\r\n    string,\r\n    { tvGenres: Genres; movieGenres: Genres },\r\n    'genres'\r\n  >(\r\n    'genres',\r\n    () => multiFetcher(getUrl('genre/tv/list'), getUrl('genre/movie/list')),\r\n    {\r\n      select: (data) => {\r\n        const [tv, movie] = data;\r\n        return { tvGenres: tv.genres, movieGenres: movie.genres };\r\n      },\r\n    }\r\n  );\r\n}\r\n\r\nexport default useGenres;\r\n","import { useEffect, useRef, useState } from 'react';\r\n\r\ninterface Options extends IntersectionObserverInit {\r\n  triggerOnce?: boolean;\r\n}\r\n\r\nconst useInView = ({\r\n  triggerOnce,\r\n  threshold = 0,\r\n  root = null,\r\n  rootMargin = '0%',\r\n}: Options) => {\r\n  const ref = useRef<any>(null);\r\n  const [inView, setInView] = useState(false);\r\n  useEffect(() => {\r\n    const node = ref?.current; // DOM Ref\r\n    const hasIOSupport = !!window.IntersectionObserver;\r\n\r\n    if (!hasIOSupport || !node) return;\r\n\r\n    const observer = new IntersectionObserver(\r\n      (entries, observer) => {\r\n        entries.forEach((entry) => {\r\n          setInView(entry.isIntersecting);\r\n          // after inView and triggeronce disconnect\r\n          if (entry.isIntersecting && triggerOnce) {\r\n            observer.disconnect();\r\n          }\r\n        });\r\n      },\r\n      { root, rootMargin, threshold }\r\n    );\r\n\r\n    observer.observe(node);\r\n\r\n    return () => observer.disconnect();\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return { ref, inView };\r\n};\r\n\r\nexport default useInView;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"../Elements/Button\";\r\nimport ButtonGroup from \"../Elements/ButtonGroup\";\r\nimport MediaScroller from \"../Elements/MediaScroller\";\r\nimport { ButtonContainer, Header } from \"../Elements/StyledElements\";\r\nimport useContentByGenre from \"../hooks/data/useContentByGenre\";\r\nimport useGenres from \"../hooks/data/useGenres\";\r\nimport useInView from \"../hooks/useInView\";\r\nimport { Genre, MediaType } from \"../types/common\";\r\nimport { getImageSrc } from \"../utils/utils\";\r\n\r\nconst ContentByGenres = () => {\r\n  const [selectedMedia, setSelectedMedia] = useState<MediaType>(MediaType.Tv);\r\n  const { data, isLoading } = useGenres();\r\n  const { tvGenres = [], movieGenres = [] } = data || {};\r\n  const tvGenresId = tvGenres.map(({ id }) => id);\r\n  const commonGenres = movieGenres.filter(({ id }) => tvGenresId.includes(id));\r\n  const genres = selectedMedia === MediaType.Movie ? movieGenres : tvGenres;\r\n  const [selectedButtonId, setSelectedButtonId] = useState(genres[0]?.id);\r\n\r\n  const buttonListItems = useMemo(\r\n    () =>\r\n      genres.map(({ id, name }) => ({\r\n        id,\r\n        label: name,\r\n        isSelected: id === selectedButtonId,\r\n        onClick: (e: React.MouseEvent<HTMLButtonElement>) => {\r\n          const { buttonId } = e.currentTarget.dataset;\r\n          if (buttonId) {\r\n            setSelectedButtonId(parseInt(buttonId));\r\n          }\r\n        },\r\n      })),\r\n    [genres, selectedButtonId]\r\n  );\r\n\r\n  useEffect(() => {\r\n    setSelectedButtonId(genres[0]?.id);\r\n  }, [genres]);\r\n\r\n  const { data: genreData = [], isLoading: genreDataIsLoading } =\r\n    useContentByGenre(selectedMedia, selectedButtonId, true);\r\n\r\n  const mediaScrollerList = genreData.map(\r\n    ({ id, title, poster_path, release_date }) => ({\r\n      id,\r\n      title,\r\n      image: getImageSrc(poster_path, \"poster\"),\r\n      caption: new Date(release_date).toLocaleDateString(\"en-us\", {\r\n        year: \"numeric\",\r\n        month: \"short\",\r\n        day: \"numeric\",\r\n      }),\r\n    })\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <MediaScroller list={[]} loading ratio={\"2/3\"} />\r\n      ) : (\r\n        <>\r\n          <Header>\r\n            <h1>Genres</h1>\r\n            <ButtonContainer>\r\n              <Button\r\n                primary={selectedMedia === MediaType.Movie}\r\n                onClick={() => setSelectedMedia(MediaType.Movie)}\r\n              >\r\n                {MediaType.Movie}\r\n              </Button>\r\n              <Button\r\n                primary={selectedMedia === MediaType.Tv}\r\n                onClick={() => setSelectedMedia(MediaType.Tv)}\r\n              >\r\n                {MediaType.Tv}\r\n              </Button>\r\n            </ButtonContainer>\r\n          </Header>\r\n          <ButtonGroup items={buttonListItems} />\r\n          <MediaScroller\r\n            list={mediaScrollerList}\r\n            ratio={\"2/3\"}\r\n            loading={genreDataIsLoading}\r\n          />\r\n\r\n          {commonGenres.map((genre, index) => (\r\n            <GenreSection genre={genre} key={genre.id} index={index} />\r\n          ))}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst Section = styled.section<{ isBackdrop: boolean }>`\r\n  background-image: ${(props) =>\r\n    props.isBackdrop\r\n      ? `linear-gradient(\r\n      to bottom,\r\n      ${props.theme.colors.surface2},\r\n      ${props.theme.colors.surface3}\r\n    )`\r\n      : \"none\"};\r\n`;\r\ntype GenreSectionProps = { genre: Genre; index: number };\r\n\r\nconst GenreSection = ({ genre, index }: GenreSectionProps) => {\r\n  const { ref, inView } = useInView({ triggerOnce: true });\r\n  const [selectedMedia, setSelectedMedia] = useState<MediaType>(\r\n    MediaType.Movie\r\n  );\r\n  const isBackdrop = index % 2 === 0;\r\n\r\n  // conditionally fetch only if the section is in view.\r\n  const { data = [], isLoading } = useContentByGenre(\r\n    selectedMedia,\r\n    genre.id,\r\n    inView\r\n  );\r\n\r\n  const mediaScrollerList = data.map(\r\n    ({ id, title, poster_path, backdrop_path, release_date }) => ({\r\n      id,\r\n      title,\r\n      image: getImageSrc(\r\n        isBackdrop ? backdrop_path : poster_path,\r\n        isBackdrop ? \"backdrop\" : \"poster\"\r\n      ),\r\n      caption: new Date(release_date).toLocaleDateString(\"en-us\", {\r\n        year: \"numeric\",\r\n        month: \"short\",\r\n        day: \"numeric\",\r\n      }),\r\n    })\r\n  );\r\n\r\n  return (\r\n    <Section ref={ref} isBackdrop={isBackdrop}>\r\n      <Header>\r\n        <h1>{genre.name}</h1>\r\n        <ButtonContainer>\r\n          <Button\r\n            primary={selectedMedia === MediaType.Movie}\r\n            onClick={() => setSelectedMedia(MediaType.Movie)}\r\n          >\r\n            {MediaType.Movie}\r\n          </Button>\r\n          <Button\r\n            primary={selectedMedia === MediaType.Tv}\r\n            onClick={() => setSelectedMedia(MediaType.Tv)}\r\n          >\r\n            {MediaType.Tv}\r\n          </Button>\r\n        </ButtonContainer>\r\n      </Header>\r\n      <MediaScroller\r\n        list={mediaScrollerList}\r\n        ratio={isBackdrop ? \"16/9\" : \"2/3\"}\r\n        // if not in the view just render loading screen\r\n        loading={inView ? isLoading : true}\r\n      />\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport default ContentByGenres;\r\n","import { useQuery } from 'react-query';\r\nimport { fetcher } from '../../services/api';\r\nimport { Media, MovieType } from '../../types/common';\r\nimport { PopularMovies, UpcomingMovies } from '../../types/Movies';\r\nimport { getMoviesFromApiResult, getUrl } from '../../utils/utils';\r\n\r\nfunction useDiscoverMovies(type: MovieType) {\r\n  return useQuery<\r\n    UpcomingMovies | PopularMovies,\r\n    string,\r\n    Media[],\r\n    ['movies', MovieType]\r\n  >(['movies', type], () => fetcher(getUrl(`movie/${type}`)), {\r\n    select: (data) => {\r\n      return type === MovieType.Upcoming\r\n        ? getMoviesFromApiResult((data as UpcomingMovies).results)\r\n        : getMoviesFromApiResult((data as PopularMovies).results);\r\n    },\r\n  });\r\n}\r\n\r\nexport default useDiscoverMovies;\r\n","import { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../Elements/Button';\r\nimport MediaScroller from '../Elements/MediaScroller';\r\nimport { ButtonContainer, Header } from '../Elements/StyledElements';\r\nimport useDiscoverMovies from '../hooks/data/useDiscoverMovies';\r\nimport { MovieType } from '../types/common';\r\nimport { getImageSrc } from '../utils/utils';\r\n\r\nconst Section = styled.section`\r\n  background-image: linear-gradient(\r\n    to bottom,\r\n    ${(props) => props.theme.colors.surface2},\r\n    ${(props) => props.theme.colors.surface3}\r\n  );\r\n`;\r\n\r\nconst DiscoverMovies = () => {\r\n  const [movieType, setMovieType] = useState<MovieType>(MovieType.Popular);\r\n\r\n  const { data = [], isLoading } = useDiscoverMovies(movieType);\r\n\r\n  const mediaScrollerList = data.map(\r\n    ({ id, title, backdrop_path, release_date }) => ({\r\n      id,\r\n      title,\r\n      image: getImageSrc(backdrop_path, 'backdrop'),\r\n      caption: new Date(release_date).toLocaleDateString('en-us', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric',\r\n      }),\r\n    })\r\n  );\r\n\r\n  const handleButton = () =>\r\n    setMovieType(\r\n      movieType === MovieType.Popular ? MovieType.Upcoming : MovieType.Popular\r\n    );\r\n  return (\r\n    <Section id=\"discover-movies\">\r\n      <Header>\r\n        <h1>Discover Movies</h1>\r\n        <ButtonContainer>\r\n          <Button\r\n            primary={movieType === MovieType.Popular}\r\n            disabled={movieType === MovieType.Popular}\r\n            onClick={handleButton}\r\n          >\r\n            Popular\r\n          </Button>\r\n          <Button\r\n            primary={movieType === MovieType.Upcoming}\r\n            disabled={movieType === MovieType.Upcoming}\r\n            onClick={handleButton}\r\n          >\r\n            Upcoming\r\n          </Button>\r\n        </ButtonContainer>\r\n      </Header>\r\n\r\n      <MediaScroller\r\n        list={mediaScrollerList}\r\n        loading={isLoading}\r\n        ratio=\"16/9\"\r\n      />\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport default DiscoverMovies;\r\n","import { useQuery } from 'react-query';\r\nimport { fetcher } from '../../services/api';\r\nimport { Media, MediaType } from '../../types/common';\r\nimport { TrendingMovies } from '../../types/Movies';\r\nimport { TrendingTv } from '../../types/Tv';\r\nimport {\r\n  getMoviesFromApiResult,\r\n  getTVsFromApiResult,\r\n  getUrl,\r\n} from '../../utils/utils';\r\n\r\nfunction useTrending(type: MediaType) {\r\n  return useQuery<\r\n    TrendingMovies | TrendingTv,\r\n    string,\r\n    Media[],\r\n    ['trending', MediaType]\r\n  >(['trending', type], () => fetcher(getUrl(`trending/${type}/day`)), {\r\n    select: (data) => {\r\n      return type === MediaType.Movie\r\n        ? getMoviesFromApiResult((data as TrendingMovies).results)\r\n        : getTVsFromApiResult((data as TrendingTv).results);\r\n    },\r\n  });\r\n}\r\n\r\nexport default useTrending;\r\n","import React, { useState } from 'react';\r\nimport Button from '../Elements/Button';\r\nimport MediaScroller from '../Elements/MediaScroller';\r\nimport { ButtonContainer, Header } from '../Elements/StyledElements';\r\nimport useTrending from '../hooks/data/useTrending';\r\nimport { MediaType } from '../types/common';\r\nimport { getImageSrc } from '../utils/utils';\r\n\r\nconst Trending = () => {\r\n  const [selectedMedia, setSelectedMedia] = useState<MediaType>(\r\n    MediaType.Movie\r\n  );\r\n\r\n  const { data = [], isLoading } = useTrending(selectedMedia);\r\n\r\n  const mediaScrollerList = data.map(\r\n    ({ id, title, poster_path, release_date }) => ({\r\n      id,\r\n      title,\r\n      image: getImageSrc(poster_path, 'poster'),\r\n      caption: new Date(release_date).toLocaleDateString('en-us', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric',\r\n      }),\r\n    })\r\n  );\r\n\r\n  const handleButton = () =>\r\n    setSelectedMedia(\r\n      selectedMedia === MediaType.Movie ? MediaType.Tv : MediaType.Movie\r\n    );\r\n\r\n  return (\r\n    <section id=\"trending\">\r\n      <Header>\r\n        <h1>Trending</h1>\r\n        <ButtonContainer>\r\n          <Button\r\n            primary={selectedMedia === MediaType.Movie}\r\n            disabled={selectedMedia === MediaType.Movie}\r\n            onClick={handleButton}\r\n          >\r\n            {MediaType.Movie}\r\n          </Button>\r\n          <Button\r\n            primary={selectedMedia === MediaType.Tv}\r\n            disabled={selectedMedia === MediaType.Tv}\r\n            onClick={handleButton}\r\n          >\r\n            {MediaType.Tv}\r\n          </Button>\r\n        </ButtonContainer>\r\n      </Header>\r\n\r\n      <MediaScroller list={mediaScrollerList} ratio=\"2/3\" loading={isLoading} />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Trending;\r\n","import { useEffect, useState } from 'react';\r\n\r\nconst useDarkMode = () => {\r\n  const darkModeQuery = window?.matchMedia('(prefers-color-scheme: dark)');\r\n  const [isDarkMode, setIsDarkMode] = useState(darkModeQuery?.matches);\r\n  useEffect(() => {\r\n    const darkModeHandler = ({ matches }: MediaQueryListEvent): void =>\r\n      setIsDarkMode(matches);\r\n    darkModeQuery?.addListener(darkModeHandler);\r\n    return () => darkModeQuery.removeEventListener('change', darkModeHandler);\r\n  }, [darkModeQuery]);\r\n\r\n  return isDarkMode;\r\n};\r\n\r\nexport default useDarkMode;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const getTheme = (isDarkMode = false) => {\r\n  /* brand foundation */\r\n  const hue = '200';\r\n  const saturation = '100%';\r\n  const lightness = '50%';\r\n\r\n  /* light */\r\n  const light = {\r\n    brand: `hsl(${hue} ${saturation} ${lightness}`,\r\n    text1: `hsl(${hue} ${saturation} 10%)`,\r\n    text2: `hsl(${hue} 30% 30%)`,\r\n    surface1: `hsl(${hue} 25% 90%)`,\r\n    surface2: `hsl(${hue} 20% 99%)`,\r\n    surface3: `hsl(${hue} 20% 92%)`,\r\n    surface4: `hsl(${hue} 20% 85%)`,\r\n    surfaceShadow: `hsl(${hue} 10% 20%)`,\r\n    shadowStrength: '0.02',\r\n  };\r\n\r\n  const dark = {\r\n    brand: `hsl(${hue} calc(${saturation} / 2) calc(${lightness} / 1.5))`,\r\n    text1: `hsl(${hue} 15% 85%)`,\r\n    text2: `hsl(${hue} 5% 65%)`,\r\n    surface1: `hsl(${hue} 10% 10%)`,\r\n    surface2: `hsl(${hue} 10% 15%)`,\r\n    surface3: `hsl(${hue} 5% 20%)`,\r\n    surface4: `hsl(${hue} 5% 25%)`,\r\n    surfaceShadow: `hsl(${hue} 50% 3%)`,\r\n    shadowStrength: '0.8',\r\n  };\r\n\r\n  function sizeStepUp(n: number, up = true): string {\r\n    let result = 1;\r\n    const typeScale = 1.25;\r\n    while (n > 1) {\r\n      result = up ? result * typeScale : result / typeScale;\r\n      n--;\r\n    }\r\n    return `calc(1rem * ${result})`;\r\n  }\r\n\r\n  return {\r\n    colors: isDarkMode ? dark : light,\r\n    size: {\r\n      xxxs: sizeStepUp(5, false),\r\n      xxs: sizeStepUp(4, false),\r\n      xs: sizeStepUp(3, false),\r\n      sm: sizeStepUp(2, false),\r\n      md: sizeStepUp(1),\r\n      lg: sizeStepUp(2),\r\n      xl: sizeStepUp(3),\r\n      xxl: sizeStepUp(4),\r\n      xxxl: sizeStepUp(5),\r\n    },\r\n    mediaQueries: {\r\n      below1400: 'only screen and (max-width: 1400px)',\r\n      below768: 'only screen and (max-width: 768px)',\r\n      below375: 'only screen and (max-width: 375px)',\r\n    },\r\n  };\r\n};\r\n\r\nconst theme = getTheme();\r\ntype ThemeType = typeof theme;\r\ndeclare module 'styled-components' {\r\n  export interface DefaultTheme extends ThemeType {}\r\n}\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  html {\r\n    /* grow as per screen width */\r\n    font-size: calc(1px + 1vw);\r\n    line-height: calc(1.5rem + 0.5vw);\r\n    block-size: 100%;\r\n    background-color: ${({ theme }) => theme.colors.surface1};\r\n    color: ${({ theme }) => theme.colors.text1};\r\n    font-family: 'Roboto Mono', monospace, system-ui, sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n\r\n    @media ${({ theme }) => theme.mediaQueries.below1400} {\r\n      font-size: 16px;\r\n    }\r\n\r\n    @media ${({ theme }) => theme.mediaQueries.below768} {\r\n      font-size: 14px;\r\n    }\r\n\r\n    @media ${({ theme }) => theme.mediaQueries.below375} {\r\n      font-size: 12px;\r\n    }\r\n  }\r\n\r\n  body {\r\n    background-color: ${({ theme }) => theme.colors.surface1};\r\n  }\r\n\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { SkeletonTheme } from 'react-loading-skeleton';\r\nimport { QueryClient, QueryClientProvider } from 'react-query';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { AppContextProvider } from './AppContext';\r\nimport ContentByGenres from './Components/ContentByGenres';\r\nimport DiscoverMovies from './Components/DiscoverMovies';\r\nimport Trending from './Components/Trending';\r\nimport useDarkMode from './hooks/useDarkMode';\r\nimport { getTheme, GlobalStyles } from './styles/theme';\r\n\r\nfunction App() {\r\n  const isDarkMode = useDarkMode();\r\n  const theme = getTheme(isDarkMode);\r\n\r\n  const queryClient = new QueryClient({\r\n    defaultOptions: {\r\n      queries: {\r\n        refetchOnWindowFocus: false,\r\n        staleTime: Infinity,\r\n      },\r\n    },\r\n  });\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <GlobalStyles />\r\n      <AppContextProvider>\r\n        <SkeletonTheme\r\n          color={theme.colors.surface2}\r\n          highlightColor={theme.colors.surface1}\r\n        >\r\n          <QueryClientProvider client={queryClient}>\r\n            <Trending />\r\n            <DiscoverMovies />\r\n            <ContentByGenres />\r\n          </QueryClientProvider>\r\n        </SkeletonTheme>\r\n      </AppContextProvider>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}