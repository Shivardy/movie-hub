{"version":3,"sources":["AppContext.tsx","hooks/createContext.tsx","Elements/Button.tsx","Elements/MediaScroller.tsx","Elements/StyledElements.tsx","hooks/useAsync.ts","utils/environment.ts","utils/utils.ts","utils/api.ts","Components/DiscoverMovies.tsx","types/common.ts","Components/Trending.tsx","hooks/useDarkMode.tsx","styles/theme.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialState","trending","movie","tv","movies","upcoming","popular","appReducer","state","action","type","payload","ctx","React","undefined","c","Error","Provider","createContext","appContext","AppProvider","AppContextProvider","children","useReducer","dispatch","value","StyledButton","styled","button","theme","primary","colors","surface1","text1","props","size","xs","xxs","xl","Button","onClick","disabled","rest","MediaScrollerUL","ul","lg","MediaItem","li","width","Figure","figure","Image","img","height","Figcaption","figcaption","md","sm","text2","MediaScroller","list","loading","split","data","Array","fill","map","item","index","image","alt","title","src","caption","id","Header","header","ButtonContainer","div","useAsync","fn","useState","setState","callback","useCallback","a","console","error","environment","apiKey","process","baseURL","imageBaseURL","getUrl","path","getImageURL","MovieType","fetchTrending","movieUrl","tvUrl","Promise","all","url","fetch","response","json","trendingMovies","trendingShows","results","backdrop_path","poster_path","vote_average","release_date","name","first_air_date","fetchPopular","fetchUpcoming","MediaType","DiscoverMovies","Popular","movieType","setMovieType","loadMovies","useEffect","mediaScrollerList","Date","toLocaleDateString","year","month","day","log","Upcoming","Section","section","surface2","surface3","Trending","Movie","selectedMedia","setSelectedMedia","trendingStatus","loadTrending","Tv","useDarkMode","darkModeQuery","window","matchMedia","matches","isDarkMode","setIsDarkMode","darkModeHandler","addListener","removeEventListener","getTheme","hue","saturation","lightness","light","brand","surface4","surfaceShadow","shadowStrength","dark","sizeStepUp","n","up","result","typeScale","xxxs","xxl","xxxl","mediaQueries","below768","below375","GlobalStyles","createGlobalStyle","App","color","highlightColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAYMA,EAAsB,CAC1BC,SAAU,CACRC,MAAO,GACPC,GAAI,IAENC,OAAQ,CACNC,SAAU,GACVC,QAAS,KAoBb,SAASC,EAAWC,EAAcC,GAChC,OAAQA,EAAOC,MACb,IAAK,yBACH,OAAO,2BACFF,GADL,IAEEP,SAAUQ,EAAOE,UAErB,IAAK,wBACH,OAAO,2BACFH,GADL,IAEEJ,OAAO,2BACFI,EAAMJ,QADL,IAEJE,QAASG,EAAOE,YAGtB,IAAK,yBACH,OAAO,2BACFH,GADL,IAEEJ,OAAO,2BACFI,EAAMJ,QADL,IAEJC,SAAUI,EAAOE,YAGvB,QACE,OAAOH,GAQb,I,gBAAA,ECrEe,WACb,IAAMI,EAAMC,qBAAmCC,GAQ/C,MAAO,CANY,WACjB,IAAMC,EAAIF,aAAiBD,GAC3B,QAAUE,IAANC,EACF,MAAM,IAAIC,MAAM,qDAClB,OAAOD,GAEWH,EAAIK,UD4DQC,GAAlC,mBAAOC,EAAP,KAAmBC,EAAnB,KAEaC,EAAqB,SAAC,GAI5B,IAHLC,EAGI,EAHJA,SAIA,EAA0BC,qBAAWhB,EAAYP,GAAjD,mBAAOQ,EAAP,KAAcgB,EAAd,KACA,OAAO,cAACJ,EAAD,CAAaK,MAAK,2BAAOjB,GAAP,IAAcgB,aAAhC,SAA6CF,K,6DE5EhDI,EAAeC,IAAOC,OAAV,oSAGP,YAAyB,IAAtBC,EAAqB,EAArBA,MACV,OAD+B,EAAdC,QAERD,EAAME,OAAOC,SAEfH,EAAME,OAAOE,SAGL,SAACC,GAAD,OAAWA,EAAML,MAAMM,KAAKC,MACzB,qBAAGP,MAAkBE,OAAOE,SAG5B,YAAyB,IAAtBJ,EAAqB,EAArBA,MACrB,OAD0C,EAAdC,QAEnBD,EAAME,OAAOE,MAEf,aAMQ,SAACC,GAAD,OAAWA,EAAML,MAAMM,KAAKE,OAC3B,SAACH,GAAD,OAAWA,EAAML,MAAMM,KAAKG,MA+BjCC,EAnBA,SAAC,GAMI,IAAD,IALjBT,eAKiB,SAJjBU,EAIiB,EAJjBA,QACAlB,EAGiB,EAHjBA,SAGiB,IAFjBmB,gBAEiB,SADdC,EACc,iBACjB,OACE,cAAChB,EAAD,yBACEI,QAASA,EACTU,QAASA,EACTC,SAAUA,GACNC,GAJN,aAMGpB,MCnDDqB,EAAkBhB,IAAOiB,GAAV,kbAGZ,SAACV,GAAD,OAAWA,EAAML,MAAMM,KAAKG,MAEjB,SAACJ,GAAD,OAAWA,EAAML,MAAMM,KAAKU,MAC7B,SAACX,GAAD,OAAWA,EAAML,MAAMM,KAAKC,MAKtB,SAACF,GAAD,OAAWA,EAAML,MAAMM,KAAKG,MAC3B,SAACJ,GAAD,OAAWA,EAAML,MAAMM,KAAKG,MAC3B,SAACJ,GAAD,OAAWA,EAAML,MAAMM,KAAKG,MAcjDQ,EAAYnB,IAAOoB,GAAV,sWAEE,SAACb,GAAD,OAAWA,EAAMc,SAUb,SAACd,GAAD,OAAWA,EAAML,MAAMM,KAAKU,MAIlB,SAACX,GAAD,OAAWA,EAAML,MAAMM,KAAKU,MAKrDI,EAAStB,IAAOuB,OAAV,uOAIE,SAAChB,GAAD,OAAWA,EAAML,MAAMM,KAAKU,MAapCM,EAAQxB,IAAOyB,IAAV,2OACM,SAAClB,GAAD,OAAWA,EAAMc,SAClB,SAACd,GAAD,OAAWA,EAAMmB,UAU3BC,EAAa3B,IAAO4B,WAAV,iMACC,SAACrB,GAAD,OAAWA,EAAML,MAAMM,KAAKqB,MAE9B,SAACtB,GAAD,OAAWA,EAAML,MAAMM,KAAKqB,MAG1B,SAACtB,GAAD,OAAWA,EAAML,MAAMM,KAAKsB,MAEhC,SAACvB,GAAD,OAAWA,EAAML,MAAME,OAAO2B,SACtB,SAACxB,GAAD,OAAWA,EAAML,MAAMM,KAAKsB,MAwDlCE,EAzCO,SAAC,GAII,IAHzBC,EAGwB,EAHxBA,KAGwB,IAFxBzB,YAEwB,MAFjB,YAEiB,MADxB0B,eACwB,SACxB,EAAwB1B,EAAK2B,MAAM,KAAnC,mBAAOd,EAAP,KAAcK,EAAd,KACMU,EAAOF,EAAUG,MAAM,IAAIC,KAAK,IAAML,EAC5C,OACE,cAACjB,EAAD,UACGoB,EAAKG,KAAI,SAACC,EAAMC,GAAP,OACR,cAACtB,EAAD,CAAkCE,MAAOA,EAAOK,OAAQA,EAAxD,SACE,eAACJ,EAAD,WACE,kCACGkB,EAAKE,MACJ,cAAClB,EAAD,CACEmB,IAAKH,EAAKI,MACVV,QAAQ,OACRW,IAAKL,EAAKE,MACVrB,MAAOA,EACPK,OAAQA,IAGV,cAAC,IAAD,CAAUL,MAAOA,EAAOK,OAAQA,MAGpC,eAACC,EAAD,WACGa,EAAKI,OACJ,qCACE,cAAC,IAAD,IACA,cAAC,IAAD,CAAUvB,MAAM,WAGnBmB,EAAKM,SAAW,4BAAIN,EAAKM,iBAtBhBN,EAAKO,IAAMN,SChHtBO,EAAShD,IAAOiD,OAAV,mOAKC,SAAC1C,GAAD,OAAWA,EAAML,MAAMM,KAAKU,MAC7B,SAACX,GAAD,OAAWA,EAAML,MAAMM,KAAKC,MACjC,SAACF,GAAD,OAAWA,EAAML,MAAMM,KAAKC,MAGzB,SAACF,GAAD,OAAWA,EAAML,MAAMM,KAAKG,MAIhCuC,EAAkBlD,IAAOmD,IAAV,wNAIT,SAAC5C,GAAD,OAAWA,EAAML,MAAMM,KAAKqB,MACzB,qBAAG3B,MAAkBE,OAAOE,S,uBCXnC,SAAS8C,EACtBC,EACAtE,GAEA,MAA0BuE,mBAA4C,CACpEzE,MAAO,YADT,mBAAOA,EAAP,KAAc0E,EAAd,KAGQ1D,EAAaL,IAAbK,SAEF2D,EAAWC,sBAAW,sBAC1B,wCAAAC,EAAA,sEAEIH,EAAS,CAAE1E,MAAO,YAFtB,SAGuBwE,EAAE,WAAF,KAHvB,OAGUjB,EAHV,OAIImB,EAAS,CAAE1E,MAAO,UAAWuD,SACzBrD,GACFc,EAAS,CAAEd,OAAMC,QAASoD,IANhC,gDASIuB,QAAQC,MAAR,MACAL,EAAS,CAAE1E,MAAO,QAAS+E,MAAO,kBAVtC,yDAaA,CAAC/D,EAAUwD,EAAItE,IAGjB,MAAO,CAACF,EAAO2E,GCpCjB,IAKeK,EALK,CAClBC,OAAQC,mCACRC,QAASD,gCACTE,aAAcF,+BCARD,EAAkCD,EAAlCC,OAAQE,EAA0BH,EAA1BG,QAASC,EAAiBJ,EAAjBI,aAEZC,EAAS,SAACC,GAAD,gBACjBH,GADiB,OACPG,EADO,oBACSL,IAExB,SAASM,EACdD,EACApF,EACAyB,GAEA,MAAM,GAAN,OAAUyD,GAAV,OAAyBzD,GAAzB,OAAgC2D,GCP3B,ICGFE,EDHQC,EAAa,uCAAG,0CAAAZ,EAAA,6DAErBa,EAAWL,EAAO,sBAClBM,EAAQN,EAAO,mBAHM,SAKmBO,QAAQC,IACpD,CAACH,EAAUC,GAAOjC,IAAlB,uCAAsB,WAAOoC,GAAP,eAAAjB,EAAA,sEACGkB,MAAMD,GADT,cACdE,EADc,yBAEbA,EAASC,QAFI,2CAAtB,wDANyB,0CAKpBC,EALoB,KAKJC,EALI,KAYrBzG,EAASwG,EAAkCE,QAAQ1C,KACvD,kBAOO,CACLK,MARF,EACEA,MAQAG,GATF,EAEEA,GAQAmC,cAVF,EAGEA,cAQAC,YAXF,EAIEA,YAQAC,aAZF,EAKEA,aAQAC,aAbF,EAMEA,iBAWE7G,EAAMwG,EAA6BC,QAAQ1C,KAC/C,gBACE+C,EADF,EACEA,KACAvC,EAFF,EAEEA,GACAmC,EAHF,EAGEA,cACAC,EAJF,EAIEA,YACAC,EALF,EAKEA,aALF,MAOO,CACLxC,MAAO0C,EACPD,aATF,EAMEE,eAIAxC,KACAmC,gBACAC,cACAC,mBA5CuB,kBA+CpB,CAAE7G,QAAOC,OA/CW,4CAAH,qDAkDbgH,EAAY,uCAAG,gCAAA9B,EAAA,sEACHkB,MAAMV,EAAO,kBADV,cACpBW,EADoB,gBAEPA,EAASC,OAFF,cAEpB1C,EAFoB,OAGpB3D,EAAU2D,EAAuB6C,QAAQ1C,KAC7C,kBAOO,CACLK,MARF,EACEA,MAQAG,GATF,EAEEA,GAQAmC,cAVF,EAGEA,cAQAC,YAXF,EAIEA,YAQAC,aAZF,EAKEA,aAQAC,aAbF,EAMEA,iBAVsB,kBAoBnB5G,GApBmB,2CAAH,qDAuBZgH,GAAa,uCAAG,gCAAA/B,EAAA,sEACJkB,MAAMV,EAAO,mBADT,cACrBW,EADqB,gBAERA,EAASC,OAFD,cAErB1C,EAFqB,OAGrB3D,EAAU2D,EAAwB6C,QAAQ1C,KAC9C,kBAOO,CACLK,MARF,EACEA,MAQAG,GATF,EAEEA,GAQAmC,cAVF,EAGEA,cAQAC,YAXF,EAIEA,YAQAC,aAZF,EAKEA,aAQAC,aAbF,EAMEA,iBAVuB,kBAoBpB5G,GApBoB,2CAAH,sD,SCtErB4F,K,kBAAAA,E,qBAAAA,M,KAIL,ICMYqB,G,GDwDGC,GA9DQ,WACrB,MAAkCrC,mBAAoBe,EAAUuB,SAAhE,mBAAOC,EAAP,KAAkBC,EAAlB,KAEA,EAA6B1C,EAC3ByC,IAAcxB,EAAUuB,QAAUJ,EAAeC,GACjDI,IAAcxB,EAAUuB,QACpB,wBACA,0BAJN,mBAAOnH,EAAP,KAAesH,EAAf,KAOAC,qBAAU,WACRD,MACC,CAACA,IAEJ,MAEIvG,IADFf,OAAUE,EADZ,EACYA,QAASD,EADrB,EACqBA,SAKfuH,GAFOJ,IAAcxB,EAAUuB,QAAUjH,EAAUD,GAE1B6D,KAC7B,gBAAGQ,EAAH,EAAGA,GAAIH,EAAP,EAAOA,MAAOsC,EAAd,EAAcA,cAAeG,EAA7B,EAA6BA,aAA7B,MAAiD,CAC/CtC,KACAH,QACAF,MAAOwC,GAAiBd,EAAYc,EAAe,EAAY,QAC/DpC,QAAS,IAAIoD,KAAKb,GAAcc,mBAAmB,QAAS,CAC1DC,KAAM,UACNC,MAAO,QACPC,IAAK,gBAKX,OADA3C,QAAQ4C,IAAI9H,GAEV,0BAASsE,GAAG,kBAAZ,UACE,eAACC,EAAD,WACE,iDACA,eAACE,EAAD,WACE,cAAC,EAAD,CACE/C,QAAS0F,IAAcxB,EAAUuB,QACjC/E,QAAS,kBAAMiF,EAAazB,EAAUuB,UAFxC,qBAMA,cAAC,EAAD,CACEzF,QAAS0F,IAAcxB,EAAUmC,SACjC3F,QAAS,kBAAMiF,EAAazB,EAAUmC,WAFxC,4BASJ,cAAC,EAAD,CACEvE,KAAMgE,EACN/D,QAA0B,YAAjBzD,EAAOI,MAChB2B,KAAK,kB,SClDDkF,K,cAAAA,E,SAAAA,Q,KCRZ,I,GAAMe,GAAUzG,IAAO0G,QAAV,6GAGP,SAACnG,GAAD,OAAWA,EAAML,MAAME,OAAOuG,YAC9B,SAACpG,GAAD,OAAWA,EAAML,MAAME,OAAOwG,YAiErBC,GA7DE,WACf,MAA0CvD,mBACxCoC,GAAUoB,OADZ,mBAAOC,EAAP,KAAsBC,EAAtB,KAIA,EAAuC5D,EACrCkB,EACA,0BAFF,mBAAO2C,EAAP,KAAuBC,EAAvB,KAKA,EAEI1H,IADFlB,SAAYC,EADd,EACcA,MAAOC,EADrB,EACqBA,GAGrBwH,qBAAU,WACRkB,MACC,CAACA,IAEJ,IAEMjB,GAFyB,UAAlBc,EAA4BxI,EAAQC,GAG1C+D,KAAI,gBAAGQ,EAAH,EAAGA,GAAIH,EAAP,EAAOA,MAAOuC,EAAd,EAAcA,YAAaE,EAA3B,EAA2BA,aAA3B,MAA+C,CACtDtC,KACAH,QACAF,MAAOyC,GAAef,EAAYe,EAAa,EAAU,QACzDrC,QAAS,IAAIoD,KAAKb,GAAcc,mBAAmB,QAAS,CAC1DC,KAAM,UACNC,MAAO,QACPC,IAAK,iBAEF,GAET,OACE,eAACG,GAAD,WACE,eAACzD,EAAD,WACE,0CACA,eAACE,EAAD,WACE,cAAC,EAAD,CACE/C,QAAS4G,IAAkBrB,GAAUoB,MACrCjG,QAAS,kBAAMmG,EAAiBtB,GAAUoB,QAF5C,SAIGpB,GAAUoB,QAEb,cAAC,EAAD,CACE3G,QAAS4G,IAAkBrB,GAAUyB,GACrCtG,QAAS,kBAAMmG,EAAiBtB,GAAUyB,KAF5C,SAIGzB,GAAUyB,WAKjB,cAAC,EAAD,CACElF,KAAMgE,EACNzF,KAAK,YACL0B,QAAkC,YAAzB+E,EAAepI,YC3DjBuI,GAbK,WAAO,IAAD,EAClBC,EAAa,UAAGC,cAAH,aAAG,EAAQC,WAAW,gCACzC,EAAoCjE,mBAAQ,OAAC+D,QAAD,IAACA,OAAD,EAACA,EAAeG,SAA5D,mBAAOC,EAAP,KAAmBC,EAAnB,KAQA,OAPA1B,qBAAU,WACR,IAAM2B,EAAkB,SAAC,GAAD,IAAGH,EAAH,EAAGA,QAAH,OACtBE,EAAcF,IAEhB,OADa,OAAbH,QAAa,IAAbA,KAAeO,YAAYD,GACpB,kBAAMN,EAAcQ,oBAAoB,SAAUF,MACxD,CAACN,IAEGI,GCVIK,GAAW,WAAyB,IAAxBL,EAAuB,wDAExCM,EAAM,MACNC,EAAa,OACbC,EAAY,MAGZC,EAAQ,CACZC,MAAM,OAAD,OAASJ,EAAT,YAAgBC,EAAhB,YAA8BC,GACnC3H,MAAM,OAAD,OAASyH,EAAT,YAAgBC,EAAhB,SACLjG,MAAM,OAAD,OAASgG,EAAT,aACL1H,SAAS,OAAD,OAAS0H,EAAT,aACRpB,SAAS,OAAD,OAASoB,EAAT,aACRnB,SAAS,OAAD,OAASmB,EAAT,aACRK,SAAS,OAAD,OAASL,EAAT,aACRM,cAAc,OAAD,OAASN,EAAT,aACbO,eAAgB,QAGZC,EAAO,CACXJ,MAAM,OAAD,OAASJ,EAAT,iBAAqBC,EAArB,sBAA6CC,EAA7C,YACL3H,MAAM,OAAD,OAASyH,EAAT,aACLhG,MAAM,OAAD,OAASgG,EAAT,YACL1H,SAAS,OAAD,OAAS0H,EAAT,aACRpB,SAAS,OAAD,OAASoB,EAAT,aACRnB,SAAS,OAAD,OAASmB,EAAT,YACRK,SAAS,OAAD,OAASL,EAAT,YACRM,cAAc,OAAD,OAASN,EAAT,YACbO,eAAgB,OAGlB,SAASE,EAAWC,GAGlB,IAHiD,IAApBC,IAAmB,yDAC5CC,EAAS,EACPC,EAAY,KACXH,EAAI,GACTE,EAASD,EAAKC,EAASC,EAAYD,EAASC,EAC5CH,IAEF,MAAM,cAAN,OAAqBE,EAArB,KAGF,MAAO,CACLvI,OAAQqH,EAAac,EAAOL,EAC5B1H,KAAM,CACJqI,KAAML,EAAW,GAAG,GACpB9H,IAAK8H,EAAW,GAAG,GACnB/H,GAAI+H,EAAW,GAAG,GAClB1G,GAAI0G,EAAW,GAAG,GAClB3G,GAAI2G,EAAW,GACftH,GAAIsH,EAAW,GACf7H,GAAI6H,EAAW,GACfM,IAAKN,EAAW,GAChBO,KAAMP,EAAW,IAEnBQ,aAAc,CACZC,SAAU,qCACVC,SAAU,wCAWHC,IANCrB,KAMcsB,YAAH,+cAID,qBAAGlJ,MAAkBE,OAAOC,YACvC,qBAAGH,MAAkBE,OAAOE,SAK5B,qBAAGJ,MAAkB8I,aAAaC,YAIlC,qBAAG/I,MAAkB8I,aAAaE,aCtDhCG,OApBf,WACE,IAAM5B,EAAaL,KACblH,EAAQ4H,GAASL,GAEvB,OACE,eAAC,IAAD,CAAevH,MAAOA,EAAtB,UACE,cAACiJ,GAAD,IACA,cAAC,EAAD,UACE,eAAC,gBAAD,CACEG,MAAOpJ,EAAME,OAAOuG,SACpB4C,eAAgBrJ,EAAME,OAAOC,SAF/B,UAIE,cAAC,GAAD,IACA,cAAC,GAAD,aCRKmJ,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.15561509.chunk.js","sourcesContent":["import { useReducer } from 'react';\r\nimport createContext from './hooks/createContext';\r\nimport { Media } from './types/common';\r\nimport { Trending } from './types/Trending';\r\n\r\ntype State = {\r\n  trending: Trending;\r\n  movies: {\r\n    upcoming: Media[];\r\n    popular: Media[];\r\n  };\r\n};\r\nconst initialState: State = {\r\n  trending: {\r\n    movie: [],\r\n    tv: [],\r\n  },\r\n  movies: {\r\n    upcoming: [],\r\n    popular: [],\r\n  },\r\n};\r\n\r\ntype ActionType =\r\n  | {\r\n      type: 'UPDATE_TRENDING_BY_DAY';\r\n      payload: Trending;\r\n    }\r\n  | {\r\n      type: 'UPDATE_POPULAR_MOVIES';\r\n      payload: Media[];\r\n    }\r\n  | {\r\n      type: 'UPDATE_UPCOMING_MOVIES';\r\n      payload: Media[];\r\n    };\r\n\r\nexport type ActionTypes = ActionType['type'];\r\n\r\nfunction appReducer(state: State, action: ActionType): State {\r\n  switch (action.type) {\r\n    case 'UPDATE_TRENDING_BY_DAY':\r\n      return {\r\n        ...state,\r\n        trending: action.payload,\r\n      };\r\n    case 'UPDATE_POPULAR_MOVIES':\r\n      return {\r\n        ...state,\r\n        movies: {\r\n          ...state.movies,\r\n          popular: action.payload,\r\n        },\r\n      };\r\n    case 'UPDATE_UPCOMING_MOVIES':\r\n      return {\r\n        ...state,\r\n        movies: {\r\n          ...state.movies,\r\n          upcoming: action.payload,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\ninterface AppContext extends State {\r\n  dispatch: React.Dispatch<ActionType>;\r\n}\r\n\r\nconst [appContext, AppProvider] = createContext<AppContext>();\r\n\r\nexport const AppContextProvider = ({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) => {\r\n  const [state, dispatch] = useReducer(appReducer, initialState);\r\n  return <AppProvider value={{ ...state, dispatch }}>{children}</AppProvider>;\r\n};\r\n\r\nexport { appContext };\r\n","import * as React from 'react';\r\n\r\nexport default function createContext<A extends {} | null>() {\r\n  const ctx = React.createContext<A | undefined>(undefined);\r\n\r\n  const useContext = () => {\r\n    const c = React.useContext(ctx);\r\n    if (c === undefined)\r\n      throw new Error('useContext must be inside a Provider with a value');\r\n    return c;\r\n  };\r\n  return [useContext, ctx.Provider] as const;\r\n}\r\n","import styled from 'styled-components';\r\n\r\ntype StyledButtonProps = { primary: boolean };\r\nconst StyledButton = styled.button<StyledButtonProps>`\r\n  width: min-content;\r\n  height: min-content;\r\n  color: ${({ theme, primary }) => {\r\n    if (primary) {\r\n      return theme.colors.surface1;\r\n    }\r\n    return theme.colors.text1;\r\n  }};\r\n\r\n  border-radius: ${(props) => props.theme.size.xs};\r\n  border: 1px solid ${({ theme }) => theme.colors.text1};\r\n  font-weight: 600;\r\n\r\n  background-color: ${({ theme, primary }) => {\r\n    if (primary) {\r\n      return theme.colors.text1;\r\n    }\r\n    return 'inherit';\r\n  }};\r\n\r\n  text-transform: capitalize;\r\n  cursor: pointer;\r\n\r\n  padding-block: ${(props) => props.theme.size.xxs};\r\n  padding-inline: ${(props) => props.theme.size.xl};\r\n`;\r\n\r\ntype ButtonOwnProps = {\r\n  onClick: React.MouseEventHandler<HTMLButtonElement>;\r\n  children: React.ReactNode;\r\n  primary?: boolean;\r\n};\r\n\r\ntype ButtonProps = ButtonOwnProps &\r\n  React.ButtonHTMLAttributes<HTMLButtonElement>;\r\n\r\nconst Button = ({\r\n  primary = true,\r\n  onClick,\r\n  children,\r\n  disabled = false,\r\n  ...rest\r\n}: ButtonProps) => {\r\n  return (\r\n    <StyledButton\r\n      primary={primary}\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import Skeleton from 'react-loading-skeleton';\r\nimport styled from 'styled-components';\r\n\r\nconst MediaScrollerUL = styled.ul`\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  gap: ${(props) => props.theme.size.xl};\r\n\r\n  padding-inline: ${(props) => props.theme.size.lg};\r\n  padding-block: ${(props) => props.theme.size.xs};\r\n\r\n  overflow-x: auto;\r\n  overscroll-behavior-inline: contain;\r\n  scroll-snap-type: inline mandatory;\r\n  scroll-padding-left: ${(props) => props.theme.size.xl};\r\n  scroll-padding-right: ${(props) => props.theme.size.xl};\r\n  scroll-padding-inline: ${(props) => props.theme.size.xl};\r\n\r\n  @media (prefers-reduced-motion: no-preference) {\r\n    & {\r\n      scroll-behavior: smooth;\r\n    }\r\n  }\r\n`;\r\n\r\ntype MediaItemProps = {\r\n  width: string;\r\n  height: string;\r\n};\r\n\r\nconst MediaItem = styled.li<MediaItemProps>`\r\n  display: inline-block;\r\n  inline-size: ${(props) => props.width};\r\n  block-size: min-content;\r\n\r\n  &:last-of-type figure {\r\n    position: relative;\r\n\r\n    &::after {\r\n      content: '';\r\n      position: absolute;\r\n\r\n      inline-size: ${(props) => props.theme.size.lg};\r\n      block-size: 100%;\r\n\r\n      inset-block-start: 0;\r\n      inset-inline-end: calc(${(props) => props.theme.size.lg} * -1);\r\n    }\r\n  }\r\n`;\r\n\r\nconst Figure = styled.figure`\r\n  scroll-snap-align: start;\r\n\r\n  display: grid;\r\n  gap: calc(${(props) => props.theme.size.lg} / 2);\r\n  margin: 0;\r\n\r\n  cursor: pointer;\r\n  user-select: none;\r\n\r\n  outline-offset: 12px;\r\n\r\n  &:focus {\r\n    outline-offset: 7px;\r\n  }\r\n`;\r\n\r\nconst Image = styled.img<MediaItemProps>`\r\n  inline-size: ${(props) => props.width};\r\n  block-size: ${(props) => props.height};\r\n  object-fit: cover;\r\n\r\n  border-radius: 1ex;\r\n  border: none;\r\n  overflow: hidden;\r\n\r\n  background-image: linear-gradient(to bottom, hsl(0 0% 40%), hsl(0 0% 20%));\r\n`;\r\n\r\nconst Figcaption = styled.figcaption`\r\n  line-height: ${(props) => props.theme.size.md};\r\n  font-weight: 600;\r\n  font-size: ${(props) => props.theme.size.md};\r\n\r\n  & > p {\r\n    font-size: ${(props) => props.theme.size.sm};\r\n    font-weight: 400;\r\n    color: ${(props) => props.theme.colors.text2};\r\n    padding-block: ${(props) => props.theme.size.sm};\r\n  }\r\n`;\r\n\r\ntype MediaScrollerProps = {\r\n  list: {\r\n    id: number;\r\n    image: string;\r\n    title: string;\r\n    caption?: string;\r\n  }[];\r\n  size?: `${number}em:${number}em`;\r\n  loading?: boolean;\r\n};\r\n\r\nconst MediaScroller = ({\r\n  list,\r\n  size = '10em:10em',\r\n  loading = false,\r\n}: MediaScrollerProps) => {\r\n  const [width, height] = size.split(':');\r\n  const data = loading ? Array(10).fill({}) : list;\r\n  return (\r\n    <MediaScrollerUL>\r\n      {data.map((item, index) => (\r\n        <MediaItem key={item.id || index} width={width} height={height}>\r\n          <Figure>\r\n            <picture>\r\n              {item.image ? (\r\n                <Image\r\n                  alt={item.title}\r\n                  loading=\"lazy\"\r\n                  src={item.image}\r\n                  width={width}\r\n                  height={height}\r\n                />\r\n              ) : (\r\n                <Skeleton width={width} height={height} />\r\n              )}\r\n            </picture>\r\n            <Figcaption>\r\n              {item.title || (\r\n                <>\r\n                  <Skeleton />\r\n                  <Skeleton width=\"65%\" />\r\n                </>\r\n              )}\r\n              {item.caption && <p>{item.caption}</p>}\r\n            </Figcaption>\r\n          </Figure>\r\n        </MediaItem>\r\n      ))}\r\n    </MediaScrollerUL>\r\n  );\r\n};\r\n\r\nexport default MediaScroller;\r\n","import styled from 'styled-components';\r\n\r\nexport const Header = styled.header`\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  align-items: center;\r\n  justify-content: start;\r\n  padding-inline: ${(props) => props.theme.size.lg};\r\n  padding-block: ${(props) => props.theme.size.xs};\r\n  grid-gap: ${(props) => props.theme.size.xs};\r\n\r\n  & h1 {\r\n    font-size: ${(props) => props.theme.size.xl};\r\n  }\r\n`;\r\n\r\nexport const ButtonContainer = styled.div`\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  width: min-content;\r\n  border-radius: ${(props) => props.theme.size.md};\r\n  border: 1px solid ${({ theme }) => theme.colors.text1};\r\n\r\n  & > button {\r\n    border: none;\r\n    border-radius: inherit;\r\n  }\r\n`;\r\n","import { useCallback, useState } from 'react';\r\nimport { ActionTypes, appContext } from '../AppContext';\r\n\r\ntype AsyncState<R> =\r\n  | { state: 'LOADING' }\r\n  | { state: 'SUCCESS'; data: R }\r\n  | { state: 'ERROR'; error: string };\r\n\r\ntype Unwrap<T> = T extends Promise<infer U> ? U : T;\r\n\r\nexport default function useAsync<T extends (...args: any[]) => Promise<any>>(\r\n  fn: T,\r\n  type?: ActionTypes\r\n): [AsyncState<Unwrap<ReturnType<T>>>, (...args: Parameters<T>) => void] {\r\n  const [state, setState] = useState<AsyncState<Unwrap<ReturnType<T>>>>({\r\n    state: 'LOADING',\r\n  });\r\n  const { dispatch } = appContext();\r\n\r\n  const callback = useCallback(\r\n    async (...args: Parameters<T>) => {\r\n      try {\r\n        setState({ state: 'LOADING' });\r\n        const data = await fn(...args);\r\n        setState({ state: 'SUCCESS', data });\r\n        if (type) {\r\n          dispatch({ type, payload: data });\r\n        }\r\n      } catch (e) {\r\n        console.error(e);\r\n        setState({ state: 'ERROR', error: 'Network Error' });\r\n      }\r\n    },\r\n    [dispatch, fn, type]\r\n  );\r\n\r\n  return [state, callback];\r\n}\r\n","const environment = {\r\n  apiKey: process.env.REACT_APP_MOVIEDB_KEY,\r\n  baseURL: process.env.REACT_APP_BASEURL,\r\n  imageBaseURL: process.env.REACT_APP_IMG_BASEURL,\r\n};\r\nexport default environment;\r\n","import { ImageType, Size } from '../types/common';\r\nimport environment from './environment';\r\n\r\nconst { apiKey, baseURL, imageBaseURL } = environment;\r\n\r\nexport const getUrl = (path: string): string =>\r\n  `${baseURL}${path}?api_key=${apiKey}`;\r\n\r\nexport function getImageURL<T extends ImageType>(\r\n  path: string,\r\n  type: T,\r\n  size: Size<T>\r\n) {\r\n  return `${imageBaseURL}${size}${path}`;\r\n}\r\n","import { Media } from '../types/common';\r\nimport { PopularMovies } from '../types/PopularMovies';\r\nimport { Trending, TrendingMovies, TrendingTv } from '../types/Trending';\r\nimport { UpcomingMovies } from '../types/UpcomingMovies';\r\nimport { getUrl } from './utils';\r\n\r\nexport const fetchTrending = async (): Promise<Trending> => {\r\n  // 'https://api.themoviedb.org/3/discover/movie?api_key=f274625ee8526fcb3150182ed7668864&with_original_language=te&release_date.lte=2021-10-20&sort_by=release_date.desc';\r\n  const movieUrl = getUrl('trending/movie/day');\r\n  const tvUrl = getUrl('trending/tv/day');\r\n\r\n  const [trendingMovies, trendingShows] = await Promise.all(\r\n    [movieUrl, tvUrl].map(async (url) => {\r\n      const response = await fetch(url);\r\n      return response.json();\r\n    })\r\n  );\r\n\r\n  const movie = (trendingMovies as TrendingMovies).results.map(\r\n    ({\r\n      title,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n      release_date,\r\n    }) => ({\r\n      title,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n      release_date,\r\n    })\r\n  );\r\n\r\n  const tv = (trendingShows as TrendingTv).results.map(\r\n    ({\r\n      name,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n      first_air_date,\r\n    }) => ({\r\n      title: name,\r\n      release_date: first_air_date,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n    })\r\n  );\r\n  return { movie, tv };\r\n};\r\n\r\nexport const fetchPopular = async (): Promise<Media[]> => {\r\n  const response = await fetch(getUrl('movie/popular'));\r\n  const data = await response.json();\r\n  const movies = (data as PopularMovies).results.map(\r\n    ({\r\n      title,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n      release_date,\r\n    }) => ({\r\n      title,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n      release_date,\r\n    })\r\n  );\r\n  return movies;\r\n};\r\n\r\nexport const fetchUpcoming = async (): Promise<Media[]> => {\r\n  const response = await fetch(getUrl('movie/upcoming'));\r\n  const data = await response.json();\r\n  const movies = (data as UpcomingMovies).results.map(\r\n    ({\r\n      title,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n      release_date,\r\n    }) => ({\r\n      title,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n      release_date,\r\n    })\r\n  );\r\n  return movies;\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { appContext } from '../AppContext';\r\nimport Button from '../Elements/Button';\r\nimport MediaScroller from '../Elements/MediaScroller';\r\nimport { ButtonContainer, Header } from '../Elements/StyledElements';\r\nimport useAsync from '../hooks/useAsync';\r\nimport { fetchPopular, fetchUpcoming } from '../utils/api';\r\nimport { getImageURL } from '../utils/utils';\r\n\r\nenum MovieType {\r\n  Popular = 'popular',\r\n  Upcoming = 'upcoming',\r\n}\r\nconst DiscoverMovies = () => {\r\n  const [movieType, setMovieType] = useState<MovieType>(MovieType.Popular);\r\n\r\n  const [movies, loadMovies] = useAsync(\r\n    movieType === MovieType.Popular ? fetchPopular : fetchUpcoming,\r\n    movieType === MovieType.Popular\r\n      ? 'UPDATE_POPULAR_MOVIES'\r\n      : 'UPDATE_UPCOMING_MOVIES'\r\n  );\r\n\r\n  useEffect(() => {\r\n    loadMovies();\r\n  }, [loadMovies]);\r\n\r\n  const {\r\n    movies: { popular, upcoming },\r\n  } = appContext();\r\n\r\n  const data = movieType === MovieType.Popular ? popular : upcoming;\r\n\r\n  const mediaScrollerList = data.map(\r\n    ({ id, title, backdrop_path, release_date }) => ({\r\n      id,\r\n      title,\r\n      image: backdrop_path && getImageURL(backdrop_path, 'backdrop', 'w300'),\r\n      caption: new Date(release_date).toLocaleDateString('en-us', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric',\r\n      }),\r\n    })\r\n  );\r\n  console.log(movies);\r\n  return (\r\n    <section id=\"discover-movies\">\r\n      <Header>\r\n        <h1>Discover Movies</h1>\r\n        <ButtonContainer>\r\n          <Button\r\n            primary={movieType === MovieType.Popular}\r\n            onClick={() => setMovieType(MovieType.Popular)}\r\n          >\r\n            Popular\r\n          </Button>\r\n          <Button\r\n            primary={movieType === MovieType.Upcoming}\r\n            onClick={() => setMovieType(MovieType.Upcoming)}\r\n          >\r\n            Upcoming\r\n          </Button>\r\n        </ButtonContainer>\r\n      </Header>\r\n\r\n      <MediaScroller\r\n        list={mediaScrollerList}\r\n        loading={movies.state === 'LOADING'}\r\n        size=\"16em:9em\"\r\n      />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default DiscoverMovies;\r\n","export type ImageType = 'poster' | 'backdrop' | 'profile';\r\n\r\nexport type Size<T extends ImageType> = T extends 'poster'\r\n  ? 'w92' | 'w154' | 'w185' | 'w342' | 'w500' | 'w780' | 'original'\r\n  : T extends 'backdrop'\r\n  ? 'w300' | 'w780' | 'w1280' | 'original'\r\n  : T extends 'profile'\r\n  ? 'w45' | 'w185' | 'original'\r\n  : never;\r\n\r\nexport type Media = {\r\n  title: string;\r\n  id: number;\r\n  backdrop_path: string;\r\n  poster_path: string;\r\n  vote_average: number;\r\n  release_date: string;\r\n};\r\n\r\nexport enum MediaType {\r\n  Movie = 'movie',\r\n  Tv = 'tv',\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { appContext } from '../AppContext';\r\nimport Button from '../Elements/Button';\r\nimport MediaScroller from '../Elements/MediaScroller';\r\nimport { ButtonContainer, Header } from '../Elements/StyledElements';\r\nimport useAsync from '../hooks/useAsync';\r\nimport { MediaType } from '../types/common';\r\nimport { fetchTrending } from '../utils/api';\r\nimport { getImageURL } from '../utils/utils';\r\n\r\nconst Section = styled.section`\r\n  background-image: linear-gradient(\r\n    to bottom,\r\n    ${(props) => props.theme.colors.surface2},\r\n    ${(props) => props.theme.colors.surface3}\r\n  );\r\n`;\r\n\r\nconst Trending = () => {\r\n  const [selectedMedia, setSelectedMedia] = useState<MediaType>(\r\n    MediaType.Movie\r\n  );\r\n\r\n  const [trendingStatus, loadTrending] = useAsync(\r\n    fetchTrending,\r\n    'UPDATE_TRENDING_BY_DAY'\r\n  );\r\n\r\n  const {\r\n    trending: { movie, tv },\r\n  } = appContext();\r\n\r\n  useEffect(() => {\r\n    loadTrending();\r\n  }, [loadTrending]);\r\n\r\n  const data = selectedMedia === 'movie' ? movie : tv;\r\n\r\n  const mediaScrollerList =\r\n    data.map(({ id, title, poster_path, release_date }) => ({\r\n      id,\r\n      title,\r\n      image: poster_path && getImageURL(poster_path, 'poster', 'w185'),\r\n      caption: new Date(release_date).toLocaleDateString('en-us', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric',\r\n      }),\r\n    })) || [];\r\n\r\n  return (\r\n    <Section>\r\n      <Header>\r\n        <h1>Trending</h1>\r\n        <ButtonContainer>\r\n          <Button\r\n            primary={selectedMedia === MediaType.Movie}\r\n            onClick={() => setSelectedMedia(MediaType.Movie)}\r\n          >\r\n            {MediaType.Movie}\r\n          </Button>\r\n          <Button\r\n            primary={selectedMedia === MediaType.Tv}\r\n            onClick={() => setSelectedMedia(MediaType.Tv)}\r\n          >\r\n            {MediaType.Tv}\r\n          </Button>\r\n        </ButtonContainer>\r\n      </Header>\r\n\r\n      <MediaScroller\r\n        list={mediaScrollerList}\r\n        size=\"10em:15em\"\r\n        loading={trendingStatus.state === 'LOADING'}\r\n      />\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport default Trending;\r\n","import { useEffect, useState } from 'react';\r\n\r\nconst useDarkMode = () => {\r\n  const darkModeQuery = window?.matchMedia('(prefers-color-scheme: dark)');\r\n  const [isDarkMode, setIsDarkMode] = useState(darkModeQuery?.matches);\r\n  useEffect(() => {\r\n    const darkModeHandler = ({ matches }: MediaQueryListEvent): void =>\r\n      setIsDarkMode(matches);\r\n    darkModeQuery?.addListener(darkModeHandler);\r\n    return () => darkModeQuery.removeEventListener('change', darkModeHandler);\r\n  }, [darkModeQuery]);\r\n\r\n  return isDarkMode;\r\n};\r\n\r\nexport default useDarkMode;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const getTheme = (isDarkMode = false) => {\r\n  /* brand foundation */\r\n  const hue = '200';\r\n  const saturation = '100%';\r\n  const lightness = '50%';\r\n\r\n  /* light */\r\n  const light = {\r\n    brand: `hsl(${hue} ${saturation} ${lightness}`,\r\n    text1: `hsl(${hue} ${saturation} 10%)`,\r\n    text2: `hsl(${hue} 30% 30%)`,\r\n    surface1: `hsl(${hue} 25% 90%)`,\r\n    surface2: `hsl(${hue} 20% 99%)`,\r\n    surface3: `hsl(${hue} 20% 92%)`,\r\n    surface4: `hsl(${hue} 20% 85%)`,\r\n    surfaceShadow: `hsl(${hue} 10% 20%)`,\r\n    shadowStrength: '0.02',\r\n  };\r\n\r\n  const dark = {\r\n    brand: `hsl(${hue} calc(${saturation} / 2) calc(${lightness} / 1.5))`,\r\n    text1: `hsl(${hue} 15% 85%)`,\r\n    text2: `hsl(${hue} 5% 65%)`,\r\n    surface1: `hsl(${hue} 10% 10%)`,\r\n    surface2: `hsl(${hue} 10% 15%)`,\r\n    surface3: `hsl(${hue} 5% 20%)`,\r\n    surface4: `hsl(${hue} 5% 25%)`,\r\n    surfaceShadow: `hsl(${hue} 50% 3%)`,\r\n    shadowStrength: '0.8',\r\n  };\r\n\r\n  function sizeStepUp(n: number, up = true): string {\r\n    let result = 1;\r\n    const typeScale = 1.25;\r\n    while (n > 1) {\r\n      result = up ? result * typeScale : result / typeScale;\r\n      n--;\r\n    }\r\n    return `calc(1em * ${result})`;\r\n  }\r\n\r\n  return {\r\n    colors: isDarkMode ? dark : light,\r\n    size: {\r\n      xxxs: sizeStepUp(5, false),\r\n      xxs: sizeStepUp(4, false),\r\n      xs: sizeStepUp(3, false),\r\n      sm: sizeStepUp(2, false),\r\n      md: sizeStepUp(1),\r\n      lg: sizeStepUp(2),\r\n      xl: sizeStepUp(3),\r\n      xxl: sizeStepUp(4),\r\n      xxxl: sizeStepUp(5),\r\n    },\r\n    mediaQueries: {\r\n      below768: 'only screen and (max-width: 768px)',\r\n      below375: 'only screen and (max-width: 375px)',\r\n    },\r\n  };\r\n};\r\n\r\nconst theme = getTheme();\r\ntype ThemeType = typeof theme;\r\ndeclare module 'styled-components' {\r\n  export interface DefaultTheme extends ThemeType {}\r\n}\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  html {\r\n    font-size: 16px;\r\n    block-size: 100%;\r\n    background-color: ${({ theme }) => theme.colors.surface1};\r\n    color: ${({ theme }) => theme.colors.text1};\r\n    font-family: 'Roboto Mono', monospace, system-ui, sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n\r\n    @media ${({ theme }) => theme.mediaQueries.below768} {\r\n      font-size: 14px;\r\n    }\r\n\r\n    @media ${({ theme }) => theme.mediaQueries.below375} {\r\n      font-size: 12px;\r\n    }\r\n  }\r\n\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n","import React from 'react';\nimport { SkeletonTheme } from 'react-loading-skeleton';\nimport { ThemeProvider } from 'styled-components';\nimport { AppContextProvider } from './AppContext';\nimport DiscoverMovies from './Components/DiscoverMovies';\nimport Trending from './Components/Trending';\nimport useDarkMode from './hooks/useDarkMode';\nimport { getTheme, GlobalStyles } from './styles/theme';\n\nfunction App() {\n  const isDarkMode = useDarkMode();\n  const theme = getTheme(isDarkMode);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyles />\n      <AppContextProvider>\n        <SkeletonTheme\n          color={theme.colors.surface2}\n          highlightColor={theme.colors.surface1}\n        >\n          <Trending />\n          <DiscoverMovies />\n        </SkeletonTheme>\n      </AppContextProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}