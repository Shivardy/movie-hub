{"version":3,"sources":["hooks/useDarkMode.tsx","styles/theme.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useDarkMode","darkModeQuery","window","matchMedia","useState","matches","isDarkMode","setIsDarkMode","useEffect","darkModeHandler","addListener","removeEventListener","getTheme","hue","saturation","lightness","light","brand","text1","text2","surface1","surface2","surface3","surface4","surfaceShadow","shadowStrength","dark","sizeStepUp","n","up","result","typeScale","colors","size","xxxs","xxs","xs","sm","md","lg","xl","xxl","xxxl","mediaQueries","below768","below375","GlobalStyles","createGlobalStyle","theme","H1","styled","h1","props","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.58029566.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nconst useDarkMode = () => {\r\n  const darkModeQuery = window?.matchMedia('(prefers-color-scheme: dark)');\r\n  const [isDarkMode, setIsDarkMode] = useState(darkModeQuery?.matches);\r\n  useEffect(() => {\r\n    const darkModeHandler = ({ matches }: MediaQueryListEvent): void =>\r\n      setIsDarkMode(matches);\r\n    darkModeQuery?.addListener(darkModeHandler);\r\n    return () => darkModeQuery.removeEventListener('change', darkModeHandler);\r\n  }, [darkModeQuery]);\r\n\r\n  return isDarkMode;\r\n};\r\n\r\nexport default useDarkMode;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const getTheme = (isDarkMode = false) => {\r\n  /* brand foundation */\r\n  const hue = '200';\r\n  const saturation = '100%';\r\n  const lightness = '50%';\r\n\r\n  /* light */\r\n  const light = {\r\n    brand: `hsl(${hue} ${saturation} ${lightness}`,\r\n    text1: `hsl(${hue} ${saturation} 10%)`,\r\n    text2: `hsl(${hue} 30% 30%)`,\r\n    surface1: `hsl(${hue} 25% 90%)`,\r\n    surface2: `hsl(${hue} 20% 99%)`,\r\n    surface3: `hsl(${hue} 20% 92%)`,\r\n    surface4: `hsl(${hue} 20% 85%)`,\r\n    surfaceShadow: `${hue} 10% 20%`,\r\n    shadowStrength: '0.02',\r\n  };\r\n\r\n  const dark = {\r\n    brand: `hsl(${hue} calc(${saturation} / 2) calc(${lightness} / 1.5))`,\r\n    text1: `hsl(${hue} 15% 85%)`,\r\n    text2: `hsl(${hue} 5% 65%)`,\r\n    surface1: `hsl(${hue} 10% 10%)`,\r\n    surface2: `hsl(${hue} 10% 15%)`,\r\n    surface3: `hsl(${hue} 5% 20%)`,\r\n    surface4: `hsl(${hue} 5% 25%)`,\r\n    surfaceShadow: `${hue} 50% 3%`,\r\n    shadowStrength: '0.8',\r\n  };\r\n\r\n  function sizeStepUp(n: number, up = true): string {\r\n    let result = 1;\r\n    const typeScale = 1.25;\r\n    while (n >= 1) {\r\n      result = up ? result * typeScale : result / typeScale;\r\n      n--;\r\n    }\r\n    return `calc(1em * ${result})`;\r\n  }\r\n\r\n  return {\r\n    colors: isDarkMode ? dark : light,\r\n    size: {\r\n      xxxs: sizeStepUp(5, false),\r\n      xxs: sizeStepUp(4, false),\r\n      xs: sizeStepUp(3, false),\r\n      sm: sizeStepUp(2, false),\r\n      md: sizeStepUp(1),\r\n      lg: sizeStepUp(2),\r\n      xl: sizeStepUp(3),\r\n      xxl: sizeStepUp(4),\r\n      xxxl: sizeStepUp(5),\r\n    },\r\n    mediaQueries: {\r\n      below768: 'only screen and (max-width: 768px)',\r\n      below375: 'only screen and (max-width: 375px)',\r\n    },\r\n  };\r\n};\r\n\r\nconst theme = getTheme();\r\ntype ThemeType = typeof theme;\r\ndeclare module 'styled-components' {\r\n  export interface DefaultTheme extends ThemeType {}\r\n}\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  html {\r\n    font-size: 16px;\r\n    block-size: 100%;\r\n    background-color: ${({ theme }) => theme.colors.surface1};\r\n    color: ${({ theme }) => theme.colors.text1};\r\n    font-family: 'Roboto Mono', monospace, system-ui, sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n\r\n    @media ${({ theme }) => theme.mediaQueries.below768} {\r\n      font-size: 14px;\r\n    }\r\n\r\n    @media ${({ theme }) => theme.mediaQueries.below375} {\r\n      font-size: 12px;\r\n    }\r\n  }\r\n\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n","import React from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\nimport useDarkMode from './hooks/useDarkMode';\nimport { getTheme, GlobalStyles } from './styles/theme';\n\nconst H1 = styled.h1`\n  font-size: ${(props) => props.theme.size.xxxl};\n  margin: ${(props) => props.theme.size.xxxs};\n`;\n\nfunction App() {\n  const isDarkMode = useDarkMode();\n  const theme = getTheme(isDarkMode);\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyles />\n      <div className=\"app\">\n        <H1>Shiva</H1>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}