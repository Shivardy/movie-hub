{"version":3,"sources":["utils/constants.ts","utils/environment.ts","utils/utils.ts","services/appReducer.ts","types/common.ts","AppContext.tsx","hooks/createContext.tsx","Elements/Button.tsx","Elements/MediaScroller.tsx","Elements/StyledElements.tsx","hooks/useInView.tsx","services/api.ts","Components/ContentByGenres.tsx","Components/DiscoverMovies.tsx","Components/Trending.tsx","hooks/useDarkMode.tsx","styles/theme.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialState","movies","upcoming","popular","trending","genres","tv","ImageSize","poster","backdrop","profile","environment","apiKey","process","baseURL","imageBaseURL","getUrl","path","queryString","getImageSrc","type","img","src","srcset","paths","filter","size","map","substring","join","getMoviesFromApiResult","results","title","id","backdrop_path","poster_path","vote_average","release_date","getTVsFromApiResult","name","first_air_date","debounce","fn","timeout","time","args","clearTimeout","setTimeout","appReducer","state","action","payload","updatedGenres","genre","genreId","data","tvGenres","movieGenres","MediaType","ctx","React","undefined","c","Error","Provider","createContext","appContext","AppProvider","AppContextProvider","children","useReducer","dispatch","value","StyledButton","styled","button","theme","primary","colors","surface1","text1","props","xs","xxs","xl","Button","onClick","disabled","rest","Div","div","Arrow","span","bsize","isHidden","MediaScrollerUL","ul","lg","MediaItem","li","inlineSize","Figure","figure","Image","blockSize","aspectRatio","surface2","Figcaption","figcaption","md","sm","text2","MediaScroller","list","ratio","loading","split","i","widthRatio","heightRatio","height","width","getHeightAndWidth","mediaList","useRef","document","createElement","useState","isHiddenLeftArrow","setIsHiddenLeftArrow","isHiddenRightArrow","setIsHiddenRightArrow","Array","fill","image","window","current","offsetWidth","scrollLeft","scrollTo","top","left","behavior","ref","onScroll","scrollWidth","item","index","ListItem","alt","srcSet","caption","Header","header","ButtonContainer","useInView","triggerOnce","threshold","root","rootMargin","inView","setInView","useEffect","node","IntersectionObserver","observer","entries","forEach","entry","isIntersecting","disconnect","observe","fetcher","url","a","fetch","response","json","multiFetcher","urls","Promise","all","swrConfig","revalidateOnFocus","revalidateIfStale","onErrorRetry","error","key","config","revalidate","retryCount","MovieType","Section","section","isBackdrop","surface3","GenreSectionWrapper","Movie","selectedMedia","setSelectedMedia","Tv","GenreSection","result","useSWR","onSuccess","currentGenre","find","mediaScrollerList","Date","toLocaleDateString","year","month","day","isValidating","ContentByGenres","tvGenresId","length","commonGenres","includes","DiscoverMovies","Popular","movieType","setMovieType","handleButton","Upcoming","Trending","apiCleaner","fetcherFn","useSWRConfig","useFetchAndDispatch","useDarkMode","darkModeQuery","matchMedia","matches","isDarkMode","setIsDarkMode","darkModeHandler","addListener","removeEventListener","getTheme","hue","saturation","lightness","light","brand","surface4","surfaceShadow","shadowStrength","dark","sizeStepUp","n","up","typeScale","xxxs","xxl","xxxl","mediaQueries","below1400","below768","below375","GlobalStyles","createGlobalStyle","App","color","highlightColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.89a9c330.chunk.js","sourcesContent":["import { State } from '../types/common';\r\n\r\nexport const initialState: State = {\r\n  movies: {\r\n    upcoming: [],\r\n    popular: [],\r\n    trending: [],\r\n    genres: [],\r\n  },\r\n  tv: {\r\n    trending: [],\r\n    genres: [],\r\n  },\r\n};\r\n\r\nexport const ImageSize = {\r\n  poster: ['w92', 'w154', 'w185', 'w342', 'w500', 'w780', 'original'],\r\n  backdrop: ['w300', 'w780', 'w1280', 'original'],\r\n  profile: ['w45', 'w185', 'original'],\r\n};\r\n","const environment = {\r\n  apiKey: process.env.REACT_APP_MOVIEDB_KEY,\r\n  baseURL: process.env.REACT_APP_BASEURL,\r\n  imageBaseURL: process.env.REACT_APP_IMG_BASEURL,\r\n};\r\nexport default environment;\r\n","import { ImageType, Media } from '../types/common';\r\nimport { MovieResult } from '../types/Movies';\r\nimport { TVResult } from '../types/Tv';\r\nimport { ImageSize } from './constants';\r\nimport environment from './environment';\r\n\r\nconst { apiKey, baseURL, imageBaseURL } = environment;\r\n\r\nexport const getUrl = (path: string, queryString = ''): string =>\r\n  `${baseURL}${path}?api_key=${apiKey}${queryString}`;\r\n\r\nexport function getImageSrc(path: string, type: ImageType) {\r\n  const img = { src: '', srcset: '' };\r\n  if (path) {\r\n    img.src = `${imageBaseURL}original${path}`;\r\n    const sizes = ImageSize[type].filter((size) => size !== 'original');\r\n    const paths = sizes.map(\r\n      (size) => `${imageBaseURL}${size}${path} ${size.substring(1)}w`\r\n    );\r\n    img.srcset = paths.join(', ');\r\n  }\r\n  return img;\r\n}\r\n\r\nexport const getMoviesFromApiResult = (results: MovieResult[]): Media[] => {\r\n  const movies = results.map(\r\n    ({\r\n      title,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n      release_date,\r\n    }) => ({\r\n      title,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n      release_date,\r\n    })\r\n  );\r\n  return movies;\r\n};\r\n\r\nexport const getTVsFromApiResult = (results: TVResult[]): Media[] => {\r\n  const tvs = results.map(\r\n    ({\r\n      name,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n      first_air_date,\r\n    }) => ({\r\n      title: name,\r\n      release_date: first_air_date,\r\n      id,\r\n      backdrop_path,\r\n      poster_path,\r\n      vote_average,\r\n    })\r\n  );\r\n  return tvs;\r\n};\r\n\r\nexport function debounce<T extends Function>(fn: T, time = 50) {\r\n  let timeout: NodeJS.Timeout;\r\n  return function (...args: any[]) {\r\n    if (timeout) {\r\n      clearTimeout(timeout);\r\n    }\r\n    timeout = setTimeout(() => {\r\n      fn(...args);\r\n      clearTimeout(timeout);\r\n    }, time);\r\n  };\r\n}\r\n\r\nexport const isTouchScreen = () => 'ontouchstart' in window;\r\n","import { ActionObjects, State } from '../types/common';\r\nimport { getMoviesFromApiResult, getTVsFromApiResult } from '../utils/utils';\r\n\r\nexport default function appReducer(state: State, action: ActionObjects): State {\r\n  switch (action.type) {\r\n    case 'UPDATE_TRENDING_MOVIES_BY_DAY':\r\n      return {\r\n        ...state,\r\n        movies: {\r\n          ...state.movies,\r\n          trending: getMoviesFromApiResult(action.payload.results),\r\n        },\r\n      };\r\n    case 'UPDATE_TRENDING_TV_BY_DAY':\r\n      return {\r\n        ...state,\r\n        tv: {\r\n          ...state.movies,\r\n          trending: getTVsFromApiResult(action.payload.results),\r\n        },\r\n      };\r\n    case 'UPDATE_POPULAR_MOVIES':\r\n      return {\r\n        ...state,\r\n        movies: {\r\n          ...state.movies,\r\n          popular: getMoviesFromApiResult(action.payload.results),\r\n        },\r\n      };\r\n    case 'UPDATE_UPCOMING_MOVIES':\r\n      return {\r\n        ...state,\r\n        movies: {\r\n          ...state.movies,\r\n          upcoming: getMoviesFromApiResult(action.payload.results),\r\n        },\r\n      };\r\n\r\n    case 'UPDATE_MOVIES_BY_GENRE': {\r\n      const { genres } = state.movies;\r\n      const updatedGenres = genres.map((genre) => {\r\n        if (genre.id === action.payload.genreId) {\r\n          genre.data = getMoviesFromApiResult(action.payload.data.results);\r\n        }\r\n        return genre;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        movies: {\r\n          ...state.movies,\r\n          genres: updatedGenres,\r\n        },\r\n      };\r\n    }\r\n\r\n    case 'UPDATE_TV_BY_GENRE': {\r\n      const { genres } = state.tv;\r\n      const updatedGenres = genres.map((genre) => {\r\n        if (genre.id === action.payload.genreId) {\r\n          genre.data = getTVsFromApiResult(action.payload.data.results);\r\n        }\r\n        return genre;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        tv: {\r\n          ...state.tv,\r\n          genres: updatedGenres,\r\n        },\r\n      };\r\n    }\r\n\r\n    case 'UPDATE_GENRES': {\r\n      return {\r\n        ...state,\r\n        tv: {\r\n          ...state.tv,\r\n          genres: action.payload.tvGenres.map((genre) => ({\r\n            ...genre,\r\n            data: [],\r\n          })),\r\n        },\r\n        movies: {\r\n          ...state.movies,\r\n          genres: action.payload.movieGenres.map((genre) => ({\r\n            ...genre,\r\n            data: [],\r\n          })),\r\n        },\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { ImageSize } from '../utils/constants';\r\nimport {\r\n  GenreMovies,\r\n  PopularMovies,\r\n  TrendingMovies,\r\n  UpcomingMovies,\r\n} from './Movies';\r\nimport { GenreTv, TrendingTv } from './Tv';\r\n\r\nexport type ImageType = keyof typeof ImageSize;\r\n\r\nexport type Media = {\r\n  title: string;\r\n  id: number;\r\n  backdrop_path: string;\r\n  poster_path: string;\r\n  vote_average: number;\r\n  release_date: string;\r\n};\r\n\r\nexport enum MediaType {\r\n  Movie = 'movie',\r\n  Tv = 'tv',\r\n}\r\n\r\nexport type Genre = {\r\n  id: number;\r\n  name: string;\r\n};\r\n\r\ntype GenreWithData = Genre & {\r\n  data: Media[];\r\n};\r\n\r\nexport type State = {\r\n  movies: {\r\n    upcoming: Media[];\r\n    popular: Media[];\r\n    trending: Media[];\r\n    genres: GenreWithData[];\r\n  };\r\n  tv: {\r\n    trending: Media[];\r\n    genres: GenreWithData[];\r\n  };\r\n};\r\n\r\nexport type ActionObjects =\r\n  | TvByGenre\r\n  | MoviesByGenre\r\n  | TrendingMoviesByDay\r\n  | TrendingTvByDay\r\n  | UpdateGenres\r\n  | UpdatePopularMovies\r\n  | UpdateUpcomingMovies;\r\n\r\ntype UpdateUpcomingMovies = {\r\n  type: 'UPDATE_UPCOMING_MOVIES';\r\n  payload: UpcomingMovies;\r\n};\r\n\r\ntype UpdatePopularMovies = {\r\n  type: 'UPDATE_POPULAR_MOVIES';\r\n  payload: PopularMovies;\r\n};\r\n\r\ntype TrendingTvByDay = {\r\n  type: 'UPDATE_TRENDING_TV_BY_DAY';\r\n  payload: TrendingTv;\r\n};\r\ntype TrendingMoviesByDay = {\r\n  type: 'UPDATE_TRENDING_MOVIES_BY_DAY';\r\n  payload: TrendingMovies;\r\n};\r\ntype MoviesByGenre = {\r\n  type: 'UPDATE_MOVIES_BY_GENRE';\r\n  payload: { data: GenreMovies; genreId: number };\r\n};\r\n\r\ntype TvByGenre = {\r\n  type: 'UPDATE_TV_BY_GENRE';\r\n  payload: { data: GenreTv; genreId: number };\r\n};\r\n\r\ntype UpdateGenres = {\r\n  type: 'UPDATE_GENRES';\r\n  payload: {\r\n    tvGenres: Genre[];\r\n    movieGenres: Genre[];\r\n  };\r\n};\r\n\r\nexport type ActionTypes = ActionObjects['type'];\r\n\r\nexport interface AppContext extends State {\r\n  dispatch: React.Dispatch<ActionObjects>;\r\n}\r\n","import { useReducer } from 'react';\r\nimport createContext from './hooks/createContext';\r\nimport appReducer from './services/appReducer';\r\nimport { AppContext } from './types/common';\r\nimport { initialState } from './utils/constants';\r\n\r\nconst [appContext, AppProvider] = createContext<AppContext>();\r\n\r\nexport const AppContextProvider = ({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) => {\r\n  const [state, dispatch] = useReducer(appReducer, initialState);\r\n  return <AppProvider value={{ ...state, dispatch }}>{children}</AppProvider>;\r\n};\r\n\r\nexport { appContext };\r\n","import * as React from 'react';\r\n\r\nexport default function createContext<A extends {} | null>() {\r\n  const ctx = React.createContext<A | undefined>(undefined);\r\n\r\n  const useContext = () => {\r\n    const c = React.useContext(ctx);\r\n    if (c === undefined)\r\n      throw new Error('useContext must be inside a Provider with a value');\r\n    return c;\r\n  };\r\n  return [useContext, ctx.Provider] as const;\r\n}\r\n","import styled from 'styled-components';\r\n\r\ntype StyledButtonProps = { primary: boolean };\r\nconst StyledButton = styled.button<StyledButtonProps>`\r\n  width: min-content;\r\n  height: min-content;\r\n  color: ${({ theme, primary }) => {\r\n    if (primary) {\r\n      return theme.colors.surface1;\r\n    }\r\n    return theme.colors.text1;\r\n  }};\r\n\r\n  border-radius: ${(props) => props.theme.size.xs};\r\n  border: 1px solid ${({ theme }) => theme.colors.text1};\r\n  font-weight: 600;\r\n\r\n  background-color: ${({ theme, primary }) => {\r\n    if (primary) {\r\n      return theme.colors.text1;\r\n    }\r\n    return 'inherit';\r\n  }};\r\n\r\n  text-transform: capitalize;\r\n  cursor: pointer;\r\n\r\n  padding-block: ${(props) => props.theme.size.xxs};\r\n  padding-inline: ${(props) => props.theme.size.xl};\r\n`;\r\n\r\ntype ButtonOwnProps = {\r\n  onClick: React.MouseEventHandler<HTMLButtonElement>;\r\n  children: React.ReactNode;\r\n  primary?: boolean;\r\n};\r\n\r\ntype ButtonProps = ButtonOwnProps &\r\n  React.ButtonHTMLAttributes<HTMLButtonElement>;\r\n\r\nconst Button = ({\r\n  primary = true,\r\n  onClick,\r\n  children,\r\n  disabled = false,\r\n  ...rest\r\n}: ButtonProps) => {\r\n  return (\r\n    <StyledButton\r\n      primary={primary}\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import { useRef, useState } from 'react';\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport styled from 'styled-components';\r\nimport { debounce, isTouchScreen } from '../utils/utils';\r\n\r\nconst Div = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nconst Arrow = styled.span<{ bsize: string; isHidden: boolean }>`\r\n  color: white;\r\n  background: rgba(20, 20, 20, 0.5);\r\n\r\n  cursor: pointer;\r\n  font-size: 6em;\r\n\r\n  position: absolute;\r\n  top: ${(props) => props.theme.size.xs};\r\n  height: ${(props) => props.bsize};\r\n  width: 4%;\r\n\r\n  text-align: center;\r\n  display: none;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  visibility: ${(props) => (props.isHidden ? 'hidden' : 'visible')};\r\n\r\n  &:nth-of-type(1) {\r\n    left: 0;\r\n  }\r\n\r\n  &:nth-of-type(2) {\r\n    right: 0;\r\n  }\r\n  ${Div}:hover & {\r\n    display: inline-flex;\r\n  }\r\n`;\r\n\r\nconst MediaScrollerUL = styled.ul`\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  gap: ${(props) => props.theme.size.xl};\r\n\r\n  padding-inline: ${(props) => props.theme.size.lg};\r\n  padding-block: ${(props) => props.theme.size.xs};\r\n\r\n  overflow-x: auto;\r\n  overscroll-behavior-inline: contain;\r\n  scroll-snap-type: inline mandatory;\r\n  scroll-padding-left: ${(props) => props.theme.size.xl};\r\n  scroll-padding-right: ${(props) => props.theme.size.xl};\r\n  scroll-padding-inline: ${(props) => props.theme.size.xl};\r\n\r\n  scrollbar-width: none;\r\n\r\n  &::-webkit-scrollbar {\r\n    width: 0;\r\n    height: 0;\r\n  }\r\n\r\n  @media (prefers-reduced-motion: no-preference) {\r\n    & {\r\n      scroll-behavior: smooth;\r\n    }\r\n  }\r\n`;\r\n\r\ntype MediaItemProps = {\r\n  inlineSize: string;\r\n};\r\n\r\nconst MediaItem = styled.li<MediaItemProps>`\r\n  display: inline-block;\r\n  inline-size: ${(props) => props.inlineSize};\r\n  block-size: min-content;\r\n`;\r\n\r\nconst Figure = styled.figure`\r\n  scroll-snap-align: start;\r\n\r\n  display: grid;\r\n  gap: calc(${(props) => props.theme.size.lg} / 2);\r\n  margin: 0;\r\n\r\n  cursor: pointer;\r\n  user-select: none;\r\n\r\n  outline-offset: 12px;\r\n\r\n  &:focus {\r\n    outline-offset: 7px;\r\n  }\r\n`;\r\n\r\ntype ImageProps = {\r\n  aspectRatio: Exclude<MediaScrollerProps['ratio'], typeof undefined>;\r\n  inlineSize: string;\r\n  blockSize: string;\r\n};\r\nconst Image = styled.img<ImageProps>`\r\n  inline-size: ${(props) => props.inlineSize};\r\n  block-size: ${(props) => props.blockSize};\r\n\r\n  aspect-ratio: ${(props) => props.aspectRatio};\r\n\r\n  object-fit: cover;\r\n\r\n  border-radius: 1ex;\r\n  border: none;\r\n  overflow: hidden;\r\n  background-image: ${(props) =>\r\n    `linear-gradient(to bottom, ${props.theme.colors.surface1}, ${props.theme.colors.surface2})`};\r\n`;\r\n\r\nconst Figcaption = styled.figcaption`\r\n  line-height: ${(props) => props.theme.size.md};\r\n  font-weight: 600;\r\n  font-size: ${(props) => props.theme.size.md};\r\n\r\n  & > p {\r\n    font-size: ${(props) => props.theme.size.sm};\r\n    font-weight: 400;\r\n    color: ${(props) => props.theme.colors.text2};\r\n    padding-block: ${(props) => props.theme.size.sm};\r\n  }\r\n`;\r\n\r\ntype ListItemType = {\r\n  id: number;\r\n  image: {\r\n    src: string;\r\n    srcset: string;\r\n  };\r\n  title: string;\r\n  caption?: string;\r\n};\r\n\r\ntype MediaScrollerProps = {\r\n  list: ListItemType[];\r\n  ratio?: '2/3' | '1/1' | '16/9';\r\n  loading?: boolean;\r\n};\r\n\r\nconst getHeightAndWidth = (ratio: MediaScrollerProps['ratio'] = '1/1') => {\r\n  const [widthRatio, heightRatio] = ratio.split('/').map((i) => +i);\r\n  const size = '10rem';\r\n  const height =\r\n    widthRatio > heightRatio ? size : `${(10 * heightRatio) / widthRatio}rem`;\r\n  const width =\r\n    widthRatio > heightRatio ? `${(10 * widthRatio) / heightRatio}rem` : size;\r\n  return [height, width];\r\n};\r\n\r\nconst MediaScroller = ({\r\n  list,\r\n  ratio = '1/1',\r\n  loading = false,\r\n}: MediaScrollerProps) => {\r\n  const [height, width] = getHeightAndWidth(ratio);\r\n  const mediaList = useRef<HTMLUListElement>(document.createElement('ul'));\r\n  const [isHiddenLeftArrow, setIsHiddenLeftArrow] = useState(true);\r\n  const [isHiddenRightArrow, setIsHiddenRightArrow] = useState(false);\r\n\r\n  const scrollToRight = () => {\r\n    const { offsetWidth, scrollLeft } = mediaList.current;\r\n    mediaList.current.scrollTo({\r\n      top: 0,\r\n      left: scrollLeft + offsetWidth,\r\n      behavior: 'smooth',\r\n    });\r\n  };\r\n\r\n  const scrollToLeft = () => {\r\n    const { offsetWidth, scrollLeft } = mediaList.current;\r\n    mediaList.current.scrollTo({\r\n      top: 0,\r\n      left: scrollLeft - offsetWidth,\r\n      behavior: 'smooth',\r\n    });\r\n  };\r\n\r\n  const handleScroll = () => {\r\n    const { offsetWidth, scrollLeft, scrollWidth } = mediaList.current;\r\n\r\n    if (offsetWidth + scrollLeft >= scrollWidth) {\r\n      setIsHiddenRightArrow(true);\r\n    } else if (isHiddenRightArrow) {\r\n      setIsHiddenRightArrow(false);\r\n    }\r\n\r\n    if (scrollLeft === 0) {\r\n      setIsHiddenLeftArrow(true);\r\n    } else if (isHiddenLeftArrow) {\r\n      setIsHiddenLeftArrow(false);\r\n    }\r\n  };\r\n\r\n  const data = loading\r\n    ? (Array(10).fill({ image: {} }) as ListItemType[])\r\n    : list;\r\n\r\n  return (\r\n    <Div>\r\n      {!loading && !isTouchScreen() && (\r\n        <>\r\n          <Arrow\r\n            bsize={height}\r\n            onClick={scrollToLeft}\r\n            isHidden={isHiddenLeftArrow}\r\n          >\r\n            ‹\r\n          </Arrow>\r\n          <Arrow\r\n            bsize={height}\r\n            onClick={scrollToRight}\r\n            isHidden={isHiddenRightArrow}\r\n          >\r\n            ›\r\n          </Arrow>\r\n        </>\r\n      )}\r\n      <MediaScrollerUL ref={mediaList} onScroll={debounce(handleScroll)}>\r\n        {data.map((item, index) => (\r\n          <ListItem\r\n            key={item.id || index}\r\n            item={item}\r\n            width={width}\r\n            height={height}\r\n            ratio={ratio}\r\n          />\r\n        ))}\r\n      </MediaScrollerUL>\r\n    </Div>\r\n  );\r\n};\r\n\r\nexport default MediaScroller;\r\n\r\ntype ListItemProps = {\r\n  item: ListItemType;\r\n  width: string;\r\n  height: string;\r\n  ratio: Exclude<MediaScrollerProps['ratio'], undefined>;\r\n};\r\n\r\nconst ListItem = ({ height, item, width, ratio }: ListItemProps) => {\r\n  return (\r\n    <MediaItem inlineSize={width}>\r\n      <Figure>\r\n        <picture>\r\n          {item.image.src ? (\r\n            <Image\r\n              aspectRatio={ratio}\r\n              inlineSize={width}\r\n              blockSize={height}\r\n              alt={item.title}\r\n              loading=\"lazy\"\r\n              srcSet={item.image.srcset}\r\n              src={item.image.src}\r\n            />\r\n          ) : (\r\n            <Skeleton width={width} height={height} />\r\n          )}\r\n        </picture>\r\n        <Figcaption>\r\n          {item.title || (\r\n            <>\r\n              <Skeleton />\r\n              <Skeleton width=\"65%\" />\r\n            </>\r\n          )}\r\n          {item.caption && <p>{item.caption}</p>}\r\n        </Figcaption>\r\n      </Figure>\r\n    </MediaItem>\r\n  );\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Header = styled.header`\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  align-items: center;\r\n  justify-content: start;\r\n  padding-inline: ${(props) => props.theme.size.lg};\r\n  padding-block: ${(props) => props.theme.size.xs};\r\n  grid-gap: ${(props) => props.theme.size.xs};\r\n\r\n  & h1 {\r\n    font-size: ${(props) => props.theme.size.xl};\r\n  }\r\n`;\r\n\r\nexport const ButtonContainer = styled.div`\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  width: min-content;\r\n  border-radius: ${(props) => props.theme.size.md};\r\n  border: 1px solid ${({ theme }) => theme.colors.text1};\r\n\r\n  & > button {\r\n    border: none;\r\n    border-radius: inherit;\r\n  }\r\n`;\r\n","import { useEffect, useRef, useState } from 'react';\r\n\r\ninterface Options extends IntersectionObserverInit {\r\n  triggerOnce?: boolean;\r\n}\r\n\r\nconst useInView = ({\r\n  triggerOnce,\r\n  threshold = 0,\r\n  root = null,\r\n  rootMargin = '0%',\r\n}: Options) => {\r\n  const ref = useRef<any>(null);\r\n  const [inView, setInView] = useState(false);\r\n  useEffect(() => {\r\n    const node = ref?.current; // DOM Ref\r\n    const hasIOSupport = !!window.IntersectionObserver;\r\n\r\n    if (!hasIOSupport || !node) return;\r\n\r\n    const observer = new IntersectionObserver(\r\n      (entries, observer) => {\r\n        entries.forEach((entry) => {\r\n          setInView(entry.isIntersecting);\r\n          // after inView and triggeronce disconnect\r\n          if (entry.isIntersecting && triggerOnce) {\r\n            observer.disconnect();\r\n          }\r\n        });\r\n      },\r\n      { root, rootMargin, threshold }\r\n    );\r\n\r\n    observer.observe(node);\r\n\r\n    return () => observer.disconnect();\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return { ref, inView };\r\n};\r\n\r\nexport default useInView;\r\n","import {\r\n  PublicConfiguration,\r\n  Revalidator,\r\n  RevalidatorOptions,\r\n} from 'swr/dist/types';\r\n\r\nexport const fetcher = async (url: string) => {\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (e) {\r\n    throw new Error('Api Error');\r\n  }\r\n};\r\n\r\nexport const multiFetcher = (...urls: string[]) =>\r\n  Promise.all(urls.map(fetcher));\r\n\r\nexport const swrConfig = {\r\n  fetcher,\r\n  revalidateOnFocus: false,\r\n  revalidateIfStale: false,\r\n  onErrorRetry: (\r\n    error: any,\r\n    key: string,\r\n    config: PublicConfiguration,\r\n    revalidate: Revalidator,\r\n    { retryCount }: Required<RevalidatorOptions>\r\n  ) => {\r\n    // Only retry up to 3 times.\r\n    if (retryCount >= 3) return;\r\n\r\n    // Retry after 3 seconds.\r\n    setTimeout(() => revalidate({ retryCount }), 3000);\r\n  },\r\n};\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport useSWR from 'swr';\r\nimport { appContext } from '../AppContext';\r\nimport Button from '../Elements/Button';\r\nimport MediaScroller from '../Elements/MediaScroller';\r\nimport { ButtonContainer, Header } from '../Elements/StyledElements';\r\nimport useInView from '../hooks/useInView';\r\nimport { multiFetcher } from '../services/api';\r\nimport { Genre, MediaType } from '../types/common';\r\nimport { getImageSrc, getUrl } from '../utils/utils';\r\n\r\nconst ContentByGenres = () => {\r\n  const { movies, tv, dispatch } = appContext();\r\n\r\n  const result = useSWR(\r\n    [getUrl('genre/tv/list'), getUrl('genre/movie/list')],\r\n    multiFetcher,\r\n    {\r\n      onSuccess: (data) => {\r\n        const [{ genres: tvGenres }, { genres: movieGenres }] = data;\r\n        dispatch({ type: 'UPDATE_GENRES', payload: { tvGenres, movieGenres } });\r\n      },\r\n    }\r\n  );\r\n\r\n  const tvGenresId = tv.genres.length ? tv.genres.map(({ id }) => id) : [];\r\n  const commonGenres = movies.genres.length\r\n    ? movies.genres.filter(({ id }) => tvGenresId.includes(id))\r\n    : [];\r\n\r\n  return (\r\n    <>\r\n      {result.isValidating ? (\r\n        <MediaScroller list={[]} loading ratio={'2/3'} />\r\n      ) : (\r\n        commonGenres.map((genre, index) => (\r\n          <GenreSectionWrapper genre={genre} key={genre.id} index={index} />\r\n        ))\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst Section = styled.section<{ isBackdrop: boolean }>`\r\n  background-image: ${(props) =>\r\n    props.isBackdrop\r\n      ? `linear-gradient(\r\n      to bottom,\r\n      ${props.theme.colors.surface2},\r\n      ${props.theme.colors.surface3}\r\n    )`\r\n      : 'none'};\r\n`;\r\ntype GenreSectionWrapperProps = { genre: Genre; index: number };\r\n\r\nconst GenreSectionWrapper = ({ genre, index }: GenreSectionWrapperProps) => {\r\n  const { ref, inView } = useInView({ triggerOnce: true });\r\n  const [selectedMedia, setSelectedMedia] = useState<MediaType>(\r\n    MediaType.Movie\r\n  );\r\n\r\n  const isBackdrop = index % 2 === 1;\r\n  return (\r\n    <Section ref={ref} isBackdrop={isBackdrop}>\r\n      <Header>\r\n        <h1>{genre.name}</h1>\r\n        <ButtonContainer>\r\n          <Button\r\n            primary={selectedMedia === MediaType.Movie}\r\n            onClick={() => setSelectedMedia(MediaType.Movie)}\r\n          >\r\n            {MediaType.Movie}\r\n          </Button>\r\n          <Button\r\n            primary={selectedMedia === MediaType.Tv}\r\n            onClick={() => setSelectedMedia(MediaType.Tv)}\r\n          >\r\n            {MediaType.Tv}\r\n          </Button>\r\n        </ButtonContainer>\r\n      </Header>\r\n      {inView ? (\r\n        <GenreSection\r\n          genreId={genre.id}\r\n          selectedMedia={selectedMedia}\r\n          isBackdrop={isBackdrop}\r\n        />\r\n      ) : (\r\n        <MediaScroller list={[]} loading ratio={isBackdrop ? '16/9' : '2/3'} />\r\n      )}\r\n    </Section>\r\n  );\r\n};\r\ntype GenreSectionProps = {\r\n  genreId: number;\r\n  selectedMedia: MediaType;\r\n  isBackdrop: boolean;\r\n};\r\nconst GenreSection = ({\r\n  genreId,\r\n  selectedMedia,\r\n  isBackdrop,\r\n}: GenreSectionProps) => {\r\n  const { dispatch, movies, tv } = appContext();\r\n\r\n  const result = useSWR(\r\n    getUrl(`discover/${selectedMedia}`, `&with_genres=${genreId}`),\r\n    {\r\n      onSuccess: (data) => {\r\n        dispatch({\r\n          type:\r\n            selectedMedia === MediaType.Movie\r\n              ? 'UPDATE_MOVIES_BY_GENRE'\r\n              : 'UPDATE_TV_BY_GENRE',\r\n          payload: { genreId, data },\r\n        });\r\n      },\r\n    }\r\n  );\r\n\r\n  const genres = selectedMedia === MediaType.Movie ? movies.genres : tv.genres;\r\n  const currentGenre = genres.find(({ id }) => genreId === id);\r\n\r\n  const mediaScrollerList =\r\n    currentGenre?.data.map(\r\n      ({ id, title, poster_path, backdrop_path, release_date }) => ({\r\n        id,\r\n        title,\r\n        image: getImageSrc(\r\n          isBackdrop ? backdrop_path : poster_path,\r\n          isBackdrop ? 'backdrop' : 'poster'\r\n        ),\r\n        caption: new Date(release_date).toLocaleDateString('en-us', {\r\n          year: 'numeric',\r\n          month: 'short',\r\n          day: 'numeric',\r\n        }),\r\n      })\r\n    ) || [];\r\n\r\n  return (\r\n    <MediaScroller\r\n      list={mediaScrollerList}\r\n      ratio={isBackdrop ? '16/9' : '2/3'}\r\n      loading={result.isValidating}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ContentByGenres;\r\n","import { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport useSWR from 'swr';\r\nimport { appContext } from '../AppContext';\r\nimport Button from '../Elements/Button';\r\nimport MediaScroller from '../Elements/MediaScroller';\r\nimport { ButtonContainer, Header } from '../Elements/StyledElements';\r\nimport { getImageSrc, getUrl } from '../utils/utils';\r\n\r\nenum MovieType {\r\n  Popular = 'popular',\r\n  Upcoming = 'upcoming',\r\n}\r\n\r\nconst Section = styled.section`\r\n  background-image: linear-gradient(\r\n    to bottom,\r\n    ${(props) => props.theme.colors.surface2},\r\n    ${(props) => props.theme.colors.surface3}\r\n  );\r\n`;\r\n\r\nconst DiscoverMovies = () => {\r\n  const [movieType, setMovieType] = useState<MovieType>(MovieType.Popular);\r\n\r\n  const {\r\n    dispatch,\r\n    movies: { popular, upcoming },\r\n  } = appContext();\r\n\r\n  const result = useSWR(getUrl(`movie/${movieType}`), {\r\n    onSuccess: (data) => {\r\n      dispatch({\r\n        type:\r\n          movieType === MovieType.Popular\r\n            ? 'UPDATE_POPULAR_MOVIES'\r\n            : 'UPDATE_UPCOMING_MOVIES',\r\n        payload: data,\r\n      });\r\n    },\r\n  });\r\n\r\n  const data = movieType === MovieType.Popular ? popular : upcoming;\r\n\r\n  const mediaScrollerList = data.map(\r\n    ({ id, title, backdrop_path, release_date }) => ({\r\n      id,\r\n      title,\r\n      image: getImageSrc(backdrop_path, 'backdrop'),\r\n      caption: new Date(release_date).toLocaleDateString('en-us', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric',\r\n      }),\r\n    })\r\n  );\r\n\r\n  const handleButton = () =>\r\n    setMovieType(\r\n      movieType === MovieType.Popular ? MovieType.Upcoming : MovieType.Popular\r\n    );\r\n  return (\r\n    <Section id=\"discover-movies\">\r\n      <Header>\r\n        <h1>Discover Movies</h1>\r\n        <ButtonContainer>\r\n          <Button\r\n            primary={movieType === MovieType.Popular}\r\n            disabled={movieType === MovieType.Popular}\r\n            onClick={handleButton}\r\n          >\r\n            Popular\r\n          </Button>\r\n          <Button\r\n            primary={movieType === MovieType.Upcoming}\r\n            disabled={movieType === MovieType.Upcoming}\r\n            onClick={handleButton}\r\n          >\r\n            Upcoming\r\n          </Button>\r\n        </ButtonContainer>\r\n      </Header>\r\n\r\n      <MediaScroller\r\n        list={mediaScrollerList}\r\n        loading={result.isValidating || result.error}\r\n        ratio=\"16/9\"\r\n      />\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport default DiscoverMovies;\r\n","import React, { useState } from 'react';\r\nimport useSWR, { Key, useSWRConfig } from 'swr';\r\nimport { appContext } from '../AppContext';\r\nimport Button from '../Elements/Button';\r\nimport MediaScroller from '../Elements/MediaScroller';\r\nimport { ButtonContainer, Header } from '../Elements/StyledElements';\r\nimport { fetcher } from '../services/api';\r\nimport { ActionTypes, MediaType } from '../types/common';\r\nimport { getImageSrc, getMoviesFromApiResult, getUrl } from '../utils/utils';\r\n\r\nconst useFetchAndDispatch = (apiCleaner: Function, type: ActionTypes) => {\r\n  const { fetcher: fetcherSWR } = useSWRConfig();\r\n\r\n  const fetcherFn = fetcherSWR || fetcher;\r\n\r\n  return async (args: Key) => {\r\n    const { dispatch } = appContext();\r\n    let data = await fetcherFn(args);\r\n    if (apiCleaner) {\r\n      data = apiCleaner(data);\r\n      dispatch({ type, payload: data });\r\n      return data;\r\n    }\r\n  };\r\n};\r\n\r\nconst Trending = () => {\r\n  const [selectedMedia, setSelectedMedia] = useState<MediaType>(\r\n    MediaType.Movie\r\n  );\r\n\r\n  const { dispatch, movies, tv } = appContext();\r\n  const fetcher = useFetchAndDispatch(\r\n    getMoviesFromApiResult,\r\n    selectedMedia === MediaType.Movie\r\n      ? 'UPDATE_TRENDING_MOVIES_BY_DAY'\r\n      : 'UPDATE_TRENDING_TV_BY_DAY'\r\n  );\r\n\r\n  const result = useSWR(getUrl(`trending/${selectedMedia}/day`), {\r\n    onSuccess: (data) => {\r\n      dispatch({\r\n        type:\r\n          selectedMedia === MediaType.Movie\r\n            ? 'UPDATE_TRENDING_MOVIES_BY_DAY'\r\n            : 'UPDATE_TRENDING_TV_BY_DAY',\r\n        payload: data as any,\r\n      });\r\n    },\r\n  });\r\n\r\n  const data =\r\n    selectedMedia === MediaType.Movie ? movies.trending : tv.trending;\r\n\r\n  const mediaScrollerList = data.map(\r\n    ({ id, title, poster_path, release_date }) => ({\r\n      id,\r\n      title,\r\n      image: getImageSrc(poster_path, 'poster'),\r\n      caption: new Date(release_date).toLocaleDateString('en-us', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric',\r\n      }),\r\n    })\r\n  );\r\n\r\n  const handleButton = () =>\r\n    setSelectedMedia(\r\n      selectedMedia === MediaType.Movie ? MediaType.Tv : MediaType.Movie\r\n    );\r\n\r\n  return (\r\n    <section id=\"trending\">\r\n      <Header>\r\n        <h1>Trending</h1>\r\n        <ButtonContainer>\r\n          <Button\r\n            primary={selectedMedia === MediaType.Movie}\r\n            disabled={selectedMedia === MediaType.Movie}\r\n            onClick={handleButton}\r\n          >\r\n            {MediaType.Movie}\r\n          </Button>\r\n          <Button\r\n            primary={selectedMedia === MediaType.Tv}\r\n            disabled={selectedMedia === MediaType.Tv}\r\n            onClick={handleButton}\r\n          >\r\n            {MediaType.Tv}\r\n          </Button>\r\n        </ButtonContainer>\r\n      </Header>\r\n\r\n      <MediaScroller\r\n        list={mediaScrollerList}\r\n        ratio=\"2/3\"\r\n        loading={result.isValidating || result.error}\r\n      />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Trending;\r\n","import { useEffect, useState } from 'react';\r\n\r\nconst useDarkMode = () => {\r\n  const darkModeQuery = window?.matchMedia('(prefers-color-scheme: dark)');\r\n  const [isDarkMode, setIsDarkMode] = useState(darkModeQuery?.matches);\r\n  useEffect(() => {\r\n    const darkModeHandler = ({ matches }: MediaQueryListEvent): void =>\r\n      setIsDarkMode(matches);\r\n    darkModeQuery?.addListener(darkModeHandler);\r\n    return () => darkModeQuery.removeEventListener('change', darkModeHandler);\r\n  }, [darkModeQuery]);\r\n\r\n  return isDarkMode;\r\n};\r\n\r\nexport default useDarkMode;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const getTheme = (isDarkMode = false) => {\r\n  /* brand foundation */\r\n  const hue = '200';\r\n  const saturation = '100%';\r\n  const lightness = '50%';\r\n\r\n  /* light */\r\n  const light = {\r\n    brand: `hsl(${hue} ${saturation} ${lightness}`,\r\n    text1: `hsl(${hue} ${saturation} 10%)`,\r\n    text2: `hsl(${hue} 30% 30%)`,\r\n    surface1: `hsl(${hue} 25% 90%)`,\r\n    surface2: `hsl(${hue} 20% 99%)`,\r\n    surface3: `hsl(${hue} 20% 92%)`,\r\n    surface4: `hsl(${hue} 20% 85%)`,\r\n    surfaceShadow: `hsl(${hue} 10% 20%)`,\r\n    shadowStrength: '0.02',\r\n  };\r\n\r\n  const dark = {\r\n    brand: `hsl(${hue} calc(${saturation} / 2) calc(${lightness} / 1.5))`,\r\n    text1: `hsl(${hue} 15% 85%)`,\r\n    text2: `hsl(${hue} 5% 65%)`,\r\n    surface1: `hsl(${hue} 10% 10%)`,\r\n    surface2: `hsl(${hue} 10% 15%)`,\r\n    surface3: `hsl(${hue} 5% 20%)`,\r\n    surface4: `hsl(${hue} 5% 25%)`,\r\n    surfaceShadow: `hsl(${hue} 50% 3%)`,\r\n    shadowStrength: '0.8',\r\n  };\r\n\r\n  function sizeStepUp(n: number, up = true): string {\r\n    let result = 1;\r\n    const typeScale = 1.25;\r\n    while (n > 1) {\r\n      result = up ? result * typeScale : result / typeScale;\r\n      n--;\r\n    }\r\n    return `calc(1rem * ${result})`;\r\n  }\r\n\r\n  return {\r\n    colors: isDarkMode ? dark : light,\r\n    size: {\r\n      xxxs: sizeStepUp(5, false),\r\n      xxs: sizeStepUp(4, false),\r\n      xs: sizeStepUp(3, false),\r\n      sm: sizeStepUp(2, false),\r\n      md: sizeStepUp(1),\r\n      lg: sizeStepUp(2),\r\n      xl: sizeStepUp(3),\r\n      xxl: sizeStepUp(4),\r\n      xxxl: sizeStepUp(5),\r\n    },\r\n    mediaQueries: {\r\n      below1400: 'only screen and (max-width: 1400px)',\r\n      below768: 'only screen and (max-width: 768px)',\r\n      below375: 'only screen and (max-width: 375px)',\r\n    },\r\n  };\r\n};\r\n\r\nconst theme = getTheme();\r\ntype ThemeType = typeof theme;\r\ndeclare module 'styled-components' {\r\n  export interface DefaultTheme extends ThemeType {}\r\n}\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  html {\r\n    /* grow as per screen width */\r\n    font-size: calc(1px + 1vw);\r\n    line-height: calc(1.1rem + 0.5vw);\r\n    block-size: 100%;\r\n    background-color: ${({ theme }) => theme.colors.surface1};\r\n    color: ${({ theme }) => theme.colors.text1};\r\n    font-family: 'Roboto Mono', monospace, system-ui, sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n\r\n    @media ${({ theme }) => theme.mediaQueries.below1400} {\r\n      font-size: 16px;\r\n    }\r\n\r\n    @media ${({ theme }) => theme.mediaQueries.below768} {\r\n      font-size: 14px;\r\n    }\r\n\r\n    @media ${({ theme }) => theme.mediaQueries.below375} {\r\n      font-size: 12px;\r\n    }\r\n  }\r\n\r\n  body {\r\n    background-color: ${({ theme }) => theme.colors.surface1};\r\n  }\r\n\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n","import React from 'react';\nimport { SkeletonTheme } from 'react-loading-skeleton';\nimport { ThemeProvider } from 'styled-components';\nimport { SWRConfig } from 'swr';\nimport { AppContextProvider } from './AppContext';\nimport ContentByGenres from './Components/ContentByGenres';\nimport DiscoverMovies from './Components/DiscoverMovies';\nimport Trending from './Components/Trending';\nimport useDarkMode from './hooks/useDarkMode';\nimport { swrConfig } from './services/api';\nimport { getTheme, GlobalStyles } from './styles/theme';\n\nfunction App() {\n  const isDarkMode = useDarkMode();\n  const theme = getTheme(isDarkMode);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyles />\n      <AppContextProvider>\n        <SkeletonTheme\n          color={theme.colors.surface2}\n          highlightColor={theme.colors.surface1}\n        >\n          <SWRConfig value={swrConfig}>\n            <Trending />\n            <DiscoverMovies />\n            <ContentByGenres />\n          </SWRConfig>\n        </SkeletonTheme>\n      </AppContextProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}